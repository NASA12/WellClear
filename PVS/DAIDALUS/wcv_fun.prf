(wcv_fun
 (box_norm_TCC1 0
  (box_norm_TCC1-1 nil 3667218664
   ("" (skeep*)
    (("" (case "NOT x<1")
      (("1" (assert) nil nil)
       ("2" (case "NOT y<1")
        (("1" (assert) nil nil)
         ("2" (hide 1)
          (("2" (case "sq(y)>=0")
            (("1" (mult-by -1 "1-sq(x)")
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (both-sides "+" "sq(x)" 1)
                  (("2" (assert)
                    (("2" (mult-ineq -3 -3) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_plus_ge1 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs_nat formula-decl nil abs_lems "reals/")
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq "reals/"))
   nil))
 (tau_mod_divs 0
  (tau_mod_divs-1 nil 3666438339
   ("" (skeep*)
    (("" (expand "divs?")
      (("" (skeep*)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "taumod") (("1" (assert) nil nil)) nil)) nil)
           ("2" (flatten)
            (("2" (expand "taumod")
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (expand "tau_mod_def")
                    (("1" (cross-mult 1) nil nil)) nil)
                   ("2" (expand "tau_mod_def")
                    (("2" (cross-mult -1) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((divs? const-decl "bool" wcv_fun nil)
    (taumod const-decl "real" horizontal_WCV_taumod "WellClear/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (div_mult_neg_gt1 formula-decl nil extra_real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (tau_mod_def const-decl
     "{rr: real | s * v < 0 AND norm(s) >= DMOD IMPLIES rr >= 0}"
     tcas_tau "TCASII/"))
   shostak))
 (horizontal_WCV_rewrite 0
  (horizontal_WCV_rewrite-3 nil 3666437864
   ("" (skeep*)
    (("" (split +)
      (("1" (flatten)
        (("1" (expand "horizontal_WCV")
          (("1" (assert)
            (("1" (flatten)
              (("1" (assert)
                (("1" (expand "max")
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (case "NOT vect2(s)*vect2(v)>0")
                        (("1" (expand "tcpa" -1)
                          (("1" (lift-if)
                            (("1" (ground)
                              (("1"
                                (expand "horizontal_tca")
                                (("1"
                                  (cross-mult -1)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (lemma "vectors_2D.sqv_eq_0")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "divs?")
                          (("2" (inst - "s" "v")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "horizontal_WCV")
          (("2" (flatten)
            (("2" (assert)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (expand "max")
                    (("2" (lift-if)
                      (("2" (ground)
                        (("2" (case "NOT vect2(s)*vect2(v)<=0")
                          (("1" (case "NOT tcpa(s,v)>=0")
                            (("1" (assert) nil nil)
                             ("2" (expand "tcpa" -1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (ground)
                                  (("1"
                                    (expand "horizontal_tca")
                                    (("1"
                                      (cross-mult -1)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (lemma "vectors_2D.sqv_eq_0")
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replaces -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "vect2(s)*vect2(v)=0")
                            (("1" (expand "tcpa")
                              (("1"
                                (lift-if)
                                (("1"
                                  (ground)
                                  (("1"
                                    (case
                                     "horizontal_tca(vect2(s), vect2(v)) = 0")
                                    (("1"
                                      (replaces -1)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (expand "horizontal_tca")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "divs?")
                              (("2"
                                (inst - "s" "v")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((horizontal_WCV const-decl "bool" horizontal_WCV "WellClear/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (add_zero_right formula-decl nil vectors_2D "vectors/")
    (scal_0 formula-decl nil vectors_2D "vectors/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (divs? const-decl "bool" wcv_fun nil)
    (tcpa const-decl "real" timevars "WellClear/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_mult_pos_neg_lt1 formula-decl nil extra_real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sqv_eq_0 formula-decl nil vectors_2D "vectors/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (horizontal_tca const-decl "real" definitions "ACCoRD/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (tcpa_timevar name-judgement "TimeVar" timevars "WellClear/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (div_mult_pos_neg_ge1 formula-decl nil extra_real_props nil)
    (dot_zero_right formula-decl nil vectors_2D "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil)
  (horizontal_WCV_rewrite-2 nil 3666437365
   ("" (skeep*)
    (("" (split +)
      (("1" (flatten)
        (("1" (expand "horizontal_WCV")
          (("1" (assert)
            (("1" (flatten)
              (("1" (assert)
                (("1" (expand "max")
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (case "NOT vect2(s)*vect2(v)>0")
                        (("1" (expand "tcpa" -1)
                          (("1" (lift-if)
                            (("1" (ground)
                              (("1"
                                (expand "horizontal_tca")
                                (("1"
                                  (cross-mult -1)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (lemma "vectors_2D.sqv_eq_0")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "divs?")
                          (("2" (inst - "s" "v")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "horizontal_WCV")
          (("2" (flatten)
            (("2" (assert)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (expand "max")
                    (("2" (lift-if)
                      (("2" (ground)
                        (("2" (case "NOT vect2(s)*vect2(v)>=0")
                          (("1" (case "NOT tcpa(s,v)>=0")
                            (("1" (assert) nil nil)
                             ("2" (expand "tcpa" -1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (ground)
                                  (("1"
                                    (expand "horizontal_tca")
                                    (("1" (postpone) nil nil))
                                    nil)
                                   ("2" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (horizontal_WCV_rewrite-1 nil 3666436759
   ("" (skeep*)
    (("" (split +)
      (("1" (flatten)
        (("1" (expand "horizontal_WCV")
          (("1" (assert)
            (("1" (flatten)
              (("1" (assert)
                (("1" (expand "max")
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (case "NOT vect2(s)*vect2(v)<0")
                        (("1" (expand "tcpa" -1)
                          (("1" (lift-if)
                            (("1" (ground)
                              (("1"
                                (expand "horizontal_tca")
                                (("1" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (vertical_WCV_rewrite 0
  (vertical_WCV_rewrite-1 nil 3666439492
   ("" (skeep*)
    (("" (expand "vertical_WCV")
      (("" (assert)
        (("" (ground)
          (("" (expand "max")
            (("" (case "sz+tcoa(sz,vz)*vz=0")
              (("1" (assert) nil nil)
               ("2" (expand "tcoa" 1)
                (("2" (lift-if)
                  (("2" (assert)
                    (("2" (case "sz*vz<0")
                      (("1" (assert) nil nil)
                       ("2" (expand "tcoa" -1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vertical_WCV const-decl "bool" vertical_WCV "WellClear/")
    (max_npreal_0 formula-decl nil min_max "reals/")
    (tcoa const-decl "real" timevars "WellClear/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (abs_nat formula-decl nil abs_lems "reals/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (vertical_wcv_norm_TCC1 0
  (vertical_wcv_norm_TCC1-1 nil 3666527569 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (vertical_wcv_norm_TCC2 0
  (vertical_wcv_norm_TCC2-1 nil 3666527569
   ("" (skeep*)
    (("" (expand "min") (("" (lift-if) (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (vertical_wcv_norm_def 0
  (vertical_wcv_norm_def-1 nil 3666700516
   ("" (skeep*)
    (("" (rewrite "vertical_WCV_rewrite")
      (("" (expand "vertical_wcv_norm")
        (("" (lift-if)
          (("" (ground)
            (("1" (cross-mult 1) nil nil)
             ("2" (replace -3)
              (("2" (expand "max")
                (("2" (lift-if)
                  (("2" (ground)
                    (("1" (cross-mult 1) nil nil)
                     ("2" (cross-mult 2) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (cross-mult -1) nil nil)
             ("4" (cross-mult -1) nil nil)
             ("5" (case "abs(s`z)/ZTHR<=1")
              (("1" (assert) nil nil) ("2" (cross-mult 1) nil nil))
              nil)
             ("6"
              (case "max(abs(s`z + max(tcoa(s`z, v`z), 0) * v`z) / ZTHR,
              tcoa(s`z, v`z) / TCOA)<=1")
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (expand "max" 1 1)
                  (("2" (lift-if)
                    (("2" (ground)
                      (("1" (cross-mult 1) nil nil)
                       ("2" (cross-mult 2) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("7" (expand "min" -1)
              (("7" (lift-if)
                (("7" (ground)
                  (("1"
                    (case "abs(s`z + max(tcoa(s`z, v`z), 0) * v`z) / ZTHR<=1")
                    (("1" (assert) (("1" (cross-mult -1) nil nil)) nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (cross-mult -1) nil nil))
                  nil))
                nil))
              nil)
             ("8" (expand "min" -1)
              (("8" (lift-if)
                (("8" (ground)
                  (("1" (case "tcoa(s`z, v`z) / TCOA<=1")
                    (("1" (assert) (("1" (cross-mult -1) nil nil)) nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (cross-mult -1) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (vertical_WCV_rewrite formula-decl nil wcv_fun nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (tcoa const-decl "real" timevars "WellClear/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (<= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (max_nnreal_0 formula-decl nil min_max "reals/")
    (vertical_wcv_norm const-decl "nnreal" wcv_fun nil))
   shostak))
 (horizontal_wcv_discr_TCC1 0
  (horizontal_wcv_discr_TCC1-1 nil 3667319299
   ("" (skeep*)
    (("" (lemma "vectors_2D.sqv_eq_0")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((sqv_eq_0 formula-decl nil vectors_2D "vectors/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (real nonempty-type-from-decl nil reals nil))
   nil))
 (horizontal_wcv_discr_pos 0
  (horizontal_wcv_discr_pos-1 nil 3667320748
   ("" (skeep*)
    (("" (lemma "Delta_ge_0_2[DTHR]")
      (("" (inst - "v" "s")
        (("1" (flatten)
          (("1" (hide -1)
            (("1" (split -)
              (("1" (hide -2)
                (("1" (hide 1)
                  (("1" (expand "horizontal_wcv_discr")
                    (("1" (rewrite "Delta_equiv")
                      (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (inst + "t")
                (("2" (rewrite "sqrt_le" 1 :dir rl)
                  (("2" (rewrite "sqrt_sqv_norm") nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Delta_ge_0_2 formula-decl nil horizontal "ACCoRD/")
    (Delta_equiv formula-decl nil horizontal "ACCoRD/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (discr const-decl "real" quadratic "reals/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (* const-decl "real" vectors_2D "vectors/")
    (horizontal_wcv_discr const-decl "real" wcv_fun nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sqrt_le formula-decl nil sqrt "reals/")
    (nnreal type-eq-decl nil real_types nil)
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (sqrt_pos application-judgement "posreal" sqrt "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_sq formula-decl nil sqrt "reals/")
    (sqrt_sqv_norm formula-decl nil vectors_2D "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D "vectors/"))
   shostak))
 (horizontal_wcv_test_def 0
  (horizontal_wcv_test_def-1 nil 3667647021
   ("" (skeep*)
    (("" (expand "horizontal_WCV")
      (("" (case "sqv(vect2(s)) <= sq(DTHR)")
        (("1" (assert)
          (("1" (expand "horizontal_wcv_test")
            (("1" (split 1)
              (("1" (rewrite "sq_le" 1 :dir rl)
                (("1" (assert)
                  (("1" (rewrite "sq_norm") (("1" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "horizontal_tca_min")
                (("2" (inst - "v" "s" "0")
                  (("1" (assert)
                    (("1" (rewrite "horizontal_sq_dtca_eq")
                      (("1" (expand "tcpa")
                        (("1" (lift-if) (("1" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (replaces -1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (replace 1)
          (("2" (split)
            (("1" (flatten)
              (("1" (assert)
                (("1" (expand "taumod" -3)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (expand "tau_mod_def")
                        (("1" (cross-mult -2)
                          (("1" (both-sides "-" "sq(DTHR)" -2)
                            (("1" (assert)
                              (("1"
                                (neg-formula -2)
                                (("1"
                                  (expand "horizontal_wcv_test")
                                  (("1"
                                    (copy -2)
                                    (("1"
                                      (mult-by -2 "TTHR")
                                      (("1"
                                        (expand "max")
                                        (("1"
                                          (rewrite "sq_le" 1 :dir rl)
                                          (("1"
                                            (rewrite "sq_norm")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "taumod") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (expand "taumod")
                  (("2" (lift-if)
                    (("2" (split +)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "tau_mod_def")
                            (("1" (split)
                              (("1" (cross-mult 1) nil nil)
                               ("2"
                                (cross-mult 1)
                                (("2"
                                  (expand "horizontal_wcv_test")
                                  (("2"
                                    (mult-by -1 "TTHR")
                                    (("2"
                                      (expand "max")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "sq_le" -2 :dir rl)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (rewrite "sq_norm")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "tcpa")
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("2"
                                  (expand "horizontal_wcv_test")
                                  (("2"
                                    (case "vect2(s)*vect2(v)=0")
                                    (("1"
                                      (expand "horizontal_tca")
                                      (("1"
                                        (replaces -1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case "vect2(s)*vect2(v)<=0")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide (2 4))
                                        (("2"
                                          (mult-by 1 "TTHR")
                                          (("2"
                                            (expand "max")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite
                                                 "sq_le"
                                                 -2
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite "sq_norm")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (horizontal_wcv_test const-decl "nnreal" wcv_fun nil)
    (horizontal_tca_min formula-decl nil definitions "ACCoRD/")
    (scal_zero formula-decl nil vectors_2D "vectors/")
    (scal_0 formula-decl nil vectors_2D "vectors/")
    (add_zero_right formula-decl nil vectors_2D "vectors/")
    (tcpa const-decl "real" timevars "WellClear/")
    (horizontal_sq_dtca_eq formula-decl nil definitions "ACCoRD/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/") nil
    (/= const-decl "boolean" notequal nil)
    (* const-decl "real" vectors_2D "vectors/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (sq_le formula-decl nil sq "reals/")
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt "reals/")
    (sq_norm formula-decl nil vectors_2D "vectors/")
    (sq_sqrt formula-decl nil sqrt "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (tcpa_timevar name-judgement "TimeVar" timevars "WellClear/")
    (taumod_pre_timevar name-judgement "(pre_timevar?)"
     horizontal_WCV_taumod "WellClear/")
    (tau_mod_def const-decl
     "{rr: real | s * v < 0 AND norm(s) >= DMOD IMPLIES rr >= 0}"
     tcas_tau "TCASII/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_minus_le1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (neg_one_times formula-decl nil extra_tegies nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_neg_le1_imp formula-decl nil extra_real_props
     nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_neg_le1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (taumod const-decl "real" horizontal_WCV_taumod "WellClear/")
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (horizontal_tca const-decl "real" definitions "ACCoRD/")
    (sqrt_sq formula-decl nil sqrt "reals/")
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (div_mult_neg_le2 formula-decl nil real_props nil)
    (horizontal_WCV const-decl "bool" horizontal_WCV "WellClear/"))
   shostak))
 (horizontal_wcv_ydist_TCC1 0
  (horizontal_wcv_ydist_TCC1-1 nil 3667318189
   ("" (subtype-tcc) nil nil)
   ((nnreal type-eq-decl nil real_types nil)
    (sqrt_0 formula-decl nil sqrt "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tcpa_timevar name-judgement "TimeVar" timevars "WellClear/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (* const-decl "real" vectors_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (horizontal_wcv_ydist_TCC2 0
  (horizontal_wcv_ydist_TCC2-1 nil 3667318189
   ("" (skeep*)
    (("" (lemma "horizontal_wcv_discr_pos")
      (("" (insteep -)
        (("" (assert)
          (("" (split -)
            (("1" (expand "horizontal_wcv_discr")
              (("1" (assert) nil nil)) nil)
             ("2" (flatten)
              (("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil)
             ("3" (inst + "tcpa(s,v)") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((horizontal_wcv_discr_pos formula-decl nil wcv_fun nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tcpa_timevar name-judgement "TimeVar" timevars "WellClear/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (tcpa const-decl "real" timevars "WellClear/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dot_zero_right formula-decl nil vectors_2D "vectors/")
    (horizontal_wcv_discr const-decl "real" wcv_fun nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/"))
   nil))
 (horizontal_wcv_ydist_TCC3 0
  (horizontal_wcv_ydist_TCC3-2 nil 3667319955
   ("" (skeep*)
    (("" (case "NOT tca-thisroot=0")
      (("1" (propax) nil nil)
       ("2" (replace -7 -1)
        (("2" (replace -2 -1)
          (("2" (expand "root" -1)
            (("2" (case "discr(a,b,c)>=0")
              (("1" (rewrite "div_distributes_minus" - :dir rl)
                (("1" (case "-b/(2*a) = tca - TTHR/2")
                  (("1" (replaces -1)
                    (("1" (replace -3 -2) (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (replace -6 1)
                    (("2" (neg-formula 1)
                      (("2" (rewrite "div_distributes" + :dir rl)
                        (("2" (assert)
                          (("2" (replace -3 +)
                            (("2" (expand "tcpa" +)
                              (("2"
                                (lift-if)
                                (("2"
                                  (ground)
                                  (("1"
                                    (expand "horizontal_tca")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -5 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -)
                                            (("1"
                                              (case
                                               "(TTHR * sqv(vect2(v)) / (2 * sqv(vect2(v)))) = TTHR/2")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (cross-mult 1)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replaces -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "horizontal_wcv_discr_pos")
                (("2" (insteep -)
                  (("2" (assert)
                    (("2" (split -)
                      (("1" (expand "horizontal_wcv_discr")
                        (("1" (assert) nil nil)) nil)
                       ("2" (flatten)
                        (("2" (replace -1) (("2" (assert) nil nil))
                          nil))
                        nil)
                       ("3" (inst + "tca") (("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (discr const-decl "real" quadratic "reals/")
    (nnreal type-eq-decl nil real_types nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (tcpa_timevar name-judgement "TimeVar" timevars "WellClear/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (mult_neg formula-decl nil extra_tegies nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (neg_div formula-decl nil extra_tegies nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (tcpa const-decl "real" timevars "WellClear/")
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (times_div2 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (horizontal_tca const-decl "real" definitions "ACCoRD/")
    (dot_zero_right formula-decl nil vectors_2D "vectors/")
    (sqv_zero formula-decl nil vectors_2D "vectors/")
    (div_distributes formula-decl nil real_props nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (horizontal_wcv_discr const-decl "real" wcv_fun nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (horizontal_wcv_discr_pos formula-decl nil wcv_fun nil)
    (root const-decl "real" quadratic "reals/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil))
   nil)
  (horizontal_wcv_ydist_TCC3-1 nil 3667318189
   ("" (skeep*) (("" (assert) (("" (postpone) nil nil)) nil)) nil) nil
   nil))
 (horizontal_wcv_ydist_TCC4 0
  (horizontal_wcv_ydist_TCC4-1 nil 3667318189
   ("" (skeep*)
    (("" (case "tca>thisroot")
      (("1" (replace -9 +)
        (("1" (cross-mult 4)
          (("1" (replace -2 +)
            (("1" (expand "tcpa" +)
              (("1" (lift-if)
                (("1" (ground)
                  (("1" (expand "horizontal_tca")
                    (("1" (cross-mult 2)
                      (("1" (ground)
                        (("1" (lemma "vectors_2D.sqv_eq_0")
                          (("1" (inst?) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "discr(a,b,c)>=0")
        (("1" (replace -7 1)
          (("1" (expand "root" 1)
            (("1" (rewrite "div_distributes_minus" + :dir rl)
              (("1" (case "-b/(2*a) = tca - TTHR/2")
                (("1" (replaces -1)
                  (("1" (lemma "vectors_2D.sqv_eq_0")
                    (("1" (inst - "v")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (hide -2)
                            (("1" (split -)
                              (("1"
                                (replaces -1)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (case
                                 "sqrt(discr(a, b, c)) / (2 * a)>=0")
                                (("1" (assert) nil nil)
                                 ("2" (cross-mult 1) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -5 1)
                  (("2" (replace -4 1)
                    (("2" (replace -2 1)
                      (("2" (expand "tcpa" 1)
                        (("2" (lift-if)
                          (("2" (ground)
                            (("1" (expand "horizontal_tca")
                              (("1"
                                (assert)
                                (("1"
                                  (neg-formula 2)
                                  (("1"
                                    (rewrite
                                     "div_distributes"
                                     +
                                     :dir
                                     rl)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replaces -1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "horizontal_wcv_discr_pos")
          (("2" (insteep -)
            (("2" (split -)
              (("1" (expand "horizontal_wcv_discr")
                (("1" (assert) nil nil)) nil)
               ("2" (flatten)
                (("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil)
               ("3" (inst + "tca") (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tcpa_timevar name-judgement "TimeVar" timevars "WellClear/")
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (tcpa const-decl "real" timevars "WellClear/")
    (div_mult_pos_neg_ge1 formula-decl nil extra_real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors_2D "vectors/")
    (minus_real_is_real application-judgement "real" reals nil)
    (sqv_eq_0 formula-decl nil vectors_2D "vectors/")
    (horizontal_tca const-decl "real" definitions "ACCoRD/")
    (horizontal_wcv_discr_pos formula-decl nil wcv_fun nil)
    (horizontal_wcv_discr const-decl "real" wcv_fun nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sqv_zero formula-decl nil vectors_2D "vectors/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (neg_div formula-decl nil extra_tegies nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (div_distributes formula-decl nil real_props nil)
    (dot_zero_right formula-decl nil vectors_2D "vectors/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (root const-decl "real" quadratic "reals/")
    (discr const-decl "real" quadratic "reals/"))
   nil))
 (horizontal_wcv_ydist_TCC5 0
  (horizontal_wcv_ydist_TCC5-2 nil 3667321542
   ("" (skeep*)
    (("" (case "tca>thisroot")
      (("1" (mult-by 4 "1/(tca-thisroot)")
        (("1" (assert) nil nil)
         ("2" (assert)
          (("2" (split)
            (("1" (cross-mult 1) nil nil) ("2" (cross-mult 1) nil nil))
            nil))
          nil))
        nil)
       ("2" (replace -6 1)
        (("2" (expand "root" 1)
          (("2" (rewrite "div_distributes_minus" + :dir rl)
            (("1" (case "-b/(2*a) = tca - TTHR/2")
              (("1" (replaces -1)
                (("1" (lemma "vectors_2D.sqv_eq_0")
                  (("1" (inst - "v")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (hide -2)
                          (("1" (split -)
                            (("1" (replaces -1)
                              (("1" (assert) nil nil)) nil)
                             ("2"
                              (case "sqrt(discr(a, b, c)) / (2 * a)>=0")
                              (("1" (assert) nil nil)
                               ("2"
                                (cross-mult 1)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (lemma "horizontal_wcv_discr_pos")
                                  (("2"
                                    (insteep -)
                                    (("2"
                                      (split -)
                                      (("1"
                                        (expand "horizontal_wcv_discr")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (replaces -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (inst + "tca")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (lemma "horizontal_wcv_discr_pos")
                                (("3"
                                  (insteep -)
                                  (("3"
                                    (split -)
                                    (("1"
                                      (expand "horizontal_wcv_discr")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (replaces -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (inst + "tca")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -4 1)
                (("2" (replace -3 1)
                  (("2" (replace -1 1)
                    (("2" (expand "tcpa" 1)
                      (("2" (lift-if)
                        (("2" (ground)
                          (("1" (expand "horizontal_tca")
                            (("1" (assert)
                              (("1"
                                (neg-formula 2)
                                (("1"
                                  (rewrite "div_distributes" + :dir rl)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replaces -1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "horizontal_wcv_discr_pos")
              (("2" (insteep -)
                (("2" (split -)
                  (("1" (expand "horizontal_wcv_discr")
                    (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (replaces -1) (("2" (assert) nil nil)) nil))
                    nil)
                   ("3" (inst + "tca") (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (tcpa_timevar name-judgement "TimeVar" timevars "WellClear/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (root const-decl "real" quadratic "reals/")
    (sqv_eq_0 formula-decl nil vectors_2D "vectors/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (horizontal_wcv_discr_pos formula-decl nil wcv_fun nil)
    (horizontal_wcv_discr const-decl "real" wcv_fun nil)
    (sqv_zero formula-decl nil vectors_2D "vectors/")
    (div_mult_pos_neg_ge1 formula-decl nil extra_real_props nil)
    (dot_zero_right formula-decl nil vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (tcpa const-decl "real" timevars "WellClear/")
    (div_distributes formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (* const-decl "real" vectors_2D "vectors/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (neg_div formula-decl nil extra_tegies nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (horizontal_tca const-decl "real" definitions "ACCoRD/")
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (discr const-decl "real" quadratic "reals/")
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil))
   nil)
  (horizontal_wcv_ydist_TCC5-1 nil 3667318189
   ("" (skeep*) (("" (postpone) nil nil)) nil) nil nil))
 (horizontal_wcv_ydist_decreasing 0
  (horizontal_wcv_ydist_decreasing-2 nil 3667548481
   (""
    (case "FORALL (DTHR, TTHR: posreal, s, v: Vect3, tt: nnreal):
                                                                vect2(s) * vect2(v) < 0 AND
                                                                 vect2(s + tt * v) * vect2(v) <= 0
                                                                 IMPLIES
                                                                 horizontal_wcv_ydist(TTHR, DTHR)(s, v) >=
                                                                  horizontal_wcv_ydist(TTHR, DTHR)(s + tt * v, v)")
    (("1" (skeep)
      (("1" (case "vect2(v)=zero")
        (("1" (expand "horizontal_wcv_ydist" +)
          (("1" (replace -1)
            (("1" (assert)
              (("1" (case "vect2(v)`y=vectors_2D.zero`y")
                (("1" (hide-all-but (-1 +)) (("1" (grind) nil nil))
                  nil)
                 ("2" (replaces -1 1) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst - "DTHR" "TTHR" "s+t1*v" "v" "t2-t1")
          (("1" (assert)
            (("1" (split -)
              (("1" (hide-all-but (-1 2))
                (("1" (grind :exclude "horizontal_wcv_ydist") nil nil))
                nil)
               ("2" (case "sqv(vect2(v))>0")
                (("1" (mult-by -1 "t2-t1")
                  (("1" (hide (-5 3)) (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (lemma "vectors_2D.sqv_eq_0")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil)
               ("3" (hide-all-but (-2 1)) (("3" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep*)
        (("2" (expand "horizontal_wcv_ydist")
          (("2" (case "sqv(vect2(s+tcpa(s,v)*v))<=sq(DTHR)")
            (("1"
              (case "FORALL (tz:nnreal): discr(sqv(vect2(v)),
                                                                                                                       2 * (vect2(s + tz * v) * vect2(v)) +
                                                                                                                        TTHR * sqv(vect2(v)),
                                                                                                                       sqv(vect2(s + tz * v)) - sq(DTHR) +
                                                                                                                        TTHR * (vect2(s + tz * v) * vect2(v)))>=0")
              (("1"
                (name "r1" "root(sqv(vect2(v)),
                                                                                                                      2 * (vect2(s) * vect2(v)) + TTHR * sqv(vect2(v)),
                                                                                                                      sqv(vect2(s)) - sq(DTHR) +
                                                                                                                       TTHR * (vect2(s) * vect2(v)),
                                                                                                                      -1)")
                (("1" (replace -1)
                  (("1"
                    (name "r2" "root(sqv(vect2(v)),
                                                                                                                                          2 * (vect2(s + tt * v) * vect2(v)) +
                                                                                                                                           TTHR * sqv(vect2(v)),
                                                                                                                                          sqv(vect2(s + tt * v)) - sq(DTHR) +
                                                                                                                                           TTHR * (vect2(s + tt * v) * vect2(v)),
                                                                                                                                          -1)")
                    (("1" (replace -1)
                      (("1" (name "tca1" "tcpa(vect2(s ), vect2(v))")
                        (("1" (replace -1)
                          (("1"
                            (name "tca2"
                                  "tcpa(vect2(s + tt * v), vect2(v))")
                            (("1" (replace -1)
                              (("1"
                                (name
                                 "dtca1"
                                 "norm(vect2(s ) + tca1 * vect2(v))")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (name
                                     "dtca2"
                                     "norm(vect2(s + tt * v) + tca2 * vect2(v))")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (case "dtca1=dtca2")
                                        (("1"
                                          (replaces -1 :dir rl)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "norm(vect2(v)) = 0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case "v`y=0")
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 +))
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "vectors_2D.norm_eq_0")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (case
                                                           "vect2(v)`y = 0")
                                                          (("1"
                                                            (hide-all-but
                                                             (-1 1))
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace 1)
                                                (("2"
                                                  (case "dtca1<=DTHR")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (name
                                                       "a"
                                                       "sqv(vect2(v))")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (name
                                                           "b1"
                                                           "2 * (vect2(s) * vect2(v)) + TTHR * a")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (name
                                                               "b2"
                                                               "2 * (vect2(s + tt * v) * vect2(v)) + TTHR * a")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (name
                                                                   "c1"
                                                                   "sqv(vect2(s)) - sq(DTHR) + TTHR * (vect2(s) * vect2(v))")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (name
                                                                       "c2"
                                                                       "sqv(vect2(s + tt * v)) - sq(DTHR) +
                                                                                                                                                                                                            TTHR * (vect2(s + tt * v) * vect2(v))")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (case
                                                                           "NOT r1 = tca1-sqrt(discr(a,b1,c1))/(2*a)-TTHR/2")
                                                                          (("1"
                                                                            (case
                                                                             "tca1-TTHR/2 = -b1/(2*a)")
                                                                            (("1"
                                                                              (expand
                                                                               "r1"
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "a"
                                                                                   (-4
                                                                                    -5))
                                                                                  (("1"
                                                                                    (replace
                                                                                     -5)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -6
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "root"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "a"
                                                                               -4)
                                                                              (("2"
                                                                                (replace
                                                                                 -4
                                                                                 1
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (case
                                                                                   "tca1-TTHR/2 = -b1/(2*a)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     (2
                                                                                      3
                                                                                      5))
                                                                                    (("2"
                                                                                      (expand
                                                                                       "tca1"
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "tcpa"
                                                                                         1)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (ground)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -4
                                                                                                 +
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "a"
                                                                                                   +)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "horizontal_tca")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (cross-mult
                                                                                                         2)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "NOT r2 = tca2-sqrt(discr(a,b2,c2))/(2*a)-TTHR/2")
                                                                            (("1"
                                                                              (case
                                                                               "tca2-TTHR/2 = -b2/(2*a)")
                                                                              (("1"
                                                                                (expand
                                                                                 "r2"
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "a"
                                                                                   (-5
                                                                                    -6))
                                                                                  (("1"
                                                                                    (replace
                                                                                     -5)
                                                                                    (("1"
                                                                                      (hide
                                                                                       3)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -3)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -7
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "root"
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 4)
                                                                                (("2"
                                                                                  (expand
                                                                                   "a"
                                                                                   -4)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -4
                                                                                     1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (case
                                                                                       "tca2-TTHR/2 = -b2/(2*a)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         (2
                                                                                          3
                                                                                          4))
                                                                                        (("2"
                                                                                          (expand
                                                                                           "tca2"
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "tcpa"
                                                                                             1)
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -4
                                                                                                     +
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "a"
                                                                                                       +)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "horizontal_tca")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "NOT tca1>r1")
                                                                              (("1"
                                                                                (hide
                                                                                 3)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "sqrt(discr(a,b1,c1))")
                                                                                        (("1"
                                                                                          (mult-by
                                                                                           -1
                                                                                           "1/a")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (cross-mult
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "NOT tca2>r2")
                                                                                (("1"
                                                                                  (hide
                                                                                   3)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     1)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "sqrt(discr(a,b2,c2))")
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         -1
                                                                                         "1/a")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (cross-mult
                                                                                           1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "NOT r2<=r1")
                                                                                  (("1"
                                                                                    (hide
                                                                                     3)
                                                                                    (("1"
                                                                                      (case
                                                                                       "r1 = r2+tt")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -3
                                                                                         1)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -4
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (case
                                                                                               "tca1=tca2+tt AND discr(a, b1, c1) = discr(a, b2, c2)")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (split
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "tca1"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "tca2"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "tcpa"
                                                                                                         +)
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "horizontal_tca"
                                                                                                               +)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "vect2_add")
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "vect2_scal")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "dot_add_left")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "sqv")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "a"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "b1"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "c1"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "a"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "discr")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "b2")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "c2")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "a")
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "vect2(s + tt * v) * vect2(v) = 0")
                                                                                    (("1"
                                                                                      (case
                                                                                       "tt = tcpa(s,v)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "norm(vect2(s + tt * v)) / DTHR<=1")
                                                                                          (("1"
                                                                                            (lift-if
                                                                                             +)
                                                                                            (("1"
                                                                                              (ground)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "NOT tca2 = 0")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "tca2"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "tcpa"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "horizontal_tca")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (cross-mult
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "nnreal_times_nnreal_is_nnreal")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (postpone)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (postpone)
                                                                            nil
                                                                            nil)
                                                                           ("4"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (postpone) nil nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil))
                nil)
               ("2" (postpone) nil nil) ("3" (postpone) nil nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (horizontal_wcv_ydist_decreasing-1 nil 3667548173
   ("" (skeep*)
    (("" (expand "horizontal_wcv_ydist" :assert? none)
      (("" (postpone) nil nil)) nil))
    nil)
   nil shostak))
 (horizontal_wcv_norm_def 0
  (horizontal_wcv_norm_def-2 nil 3667036306
   ("" (skeep*)
    (("" (split)
      (("1" (flatten)
        (("1" (label "thresh" -2)
          (("1" (expand "horizontal_wcv_norm" :assert? none)
            (("1" (lift-if)
              (("1" (split +)
                (("1" (flatten)
                  (("1" (case "vect2(v)=zero")
                    (("1" (hide -2)
                      (("1" (expand "horizontal_WCV")
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (case "sqv(vect2(s))<=sq(DTHR)")
                              (("1" (cross-mult 1) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (split -)
                      (("1" (lemma "vectors_2D.sqv_eq_0")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (rewrite "sq_eq" -1 :dir rl)
                              (("1" (rewrite "sq_norm") nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "horizontal_WCV")
                        (("2" (case "sqv(vect2(s)) <= sq(DTHR)")
                          (("1" (cross-mult 2)
                            (("1" (rewrite "sq_le" 2 :dir rl)
                              (("1"
                                (rewrite "sq_norm")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (lemma "tau_mod_divs")
                                (("2"
                                  (insteep -)
                                  (("2"
                                    (expand "divs?")
                                    (("2"
                                      (inst - "s" "v")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "taumod")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (case "vect2(v)=zero")
                    (("1" (replaces -1) (("1" (assert) nil nil)) nil)
                     ("2" (skoletin 4)
                      (("2" (skoletin 1)
                        (("2" (skoletin 1)
                          (("2" (skoletin 1)
                            (("2" (skoletin 1)
                              (("2"
                                (skoletin 1)
                                (("2"
                                  (case "tcadist <= DTHR")
                                  (("1"
                                    (case "discr(a, b, c) >= 0")
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (skoletin 1)
                                        (("1"
                                          (skoletin 1)
                                          (("1"
                                            (case "tca-thisroot>0")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (rewrite
                                                   "sq_le"
                                                   1
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "sq(xdist)<=1")
                                                      (("1"
                                                        (case
                                                         "sq(ydist)<=1")
                                                        (("1"
                                                          (mult-by
                                                           -1
                                                           "1-sq(xdist)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "sqrt_le"
                                                           1
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (rewrite
                                                             "sqrt_sq")
                                                            (("1"
                                                              (replace
                                                               -4
                                                               1)
                                                              (("1"
                                                                (cross-mult
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "tca>=0")
                                                              (("1"
                                                                (replace
                                                                 -5
                                                                 1)
                                                                (("1"
                                                                  (cross-mult
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -9
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "tcpa")
                                                                  (("2"
                                                                    (expand
                                                                     "horizontal_tca"
                                                                     1)
                                                                    (("2"
                                                                      (cross-mult
                                                                       1)
                                                                      (("2"
                                                                        (ground)
                                                                        (("2"
                                                                          (lemma
                                                                           "vectors_2D.sqv_eq_0")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma "sq_le")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "xdist"
                                                           "1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replace
                                                               -7
                                                               1)
                                                              (("2"
                                                                (cross-mult
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "NOT horizontal_WCV[TTHR, DTHR](taumod[TTHR,DTHR])(vect2(s), vect2(v))")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "horizontal_WCV"
                                                     -1)
                                                    (("2"
                                                      (case
                                                       "sqv(vect2(s)) <= sq(DTHR)")
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (name
                                                           "f"
                                                           "quadratic(a,b,c)")
                                                          (("1"
                                                            (case
                                                             "f(0)<=0")
                                                            (("1"
                                                              (lemma
                                                               "quadratic_le_0")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "a"
                                                                 "b"
                                                                 "c"
                                                                 "0")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "discr(a,b,c)>=0")
                                                                    (("1"
                                                                      (replace
                                                                       -12
                                                                       1)
                                                                      (("1"
                                                                        (case
                                                                         "taumod[TTHR,DTHR](s,v)<=TTHR")
                                                                        (("1"
                                                                          (expand
                                                                           "taumod"
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "tau_mod_def")
                                                                            (("1"
                                                                              (cross-mult
                                                                               -1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "taumod[TTHR,DTHR](s,v)<=0")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "taumod"
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "tau_mod_def")
                                                                              (("2"
                                                                                (cross-mult
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "discr")
                                                              (("2"
                                                                (case
                                                                 "c<=0")
                                                                (("1"
                                                                  (expand
                                                                   "f"
                                                                   1)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "taumod[TTHR,DTHR](s,v)<=TTHR")
                                                                  (("1"
                                                                    (expand
                                                                     "taumod"
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "tau_mod_def")
                                                                      (("1"
                                                                        (cross-mult
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "taumod[TTHR,DTHR](s,v)<=0")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "taumod")
                                                                      (("2"
                                                                        (expand
                                                                         "tau_mod_def")
                                                                        (("2"
                                                                          (cross-mult
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (lemma
                                                             "quadratic_gt_0")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "a"
                                                               "b"
                                                               "c"
                                                               "0")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "a > 0")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "NOT taumod[TTHR,DTHR] = taumod[TTHR, DTHR]")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "taumod"
                                                                           -5)
                                                                          (("2"
                                                                            (expand
                                                                             "tau_mod_def")
                                                                            (("2"
                                                                              (cross-mult
                                                                               -5)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "vectors_2D.sqv_eq_0")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "v")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (case "a>0")
                                                (("1"
                                                  (case
                                                   "NOT thisroot = tca-sqrt(discr(a,b,c))/(2*a)-TTHR/2")
                                                  (("1"
                                                    (replace -3 1)
                                                    (("1"
                                                      (case
                                                       "tca-TTHR/2 = -b/(2*a)")
                                                      (("1"
                                                        (expand
                                                         "root"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -9 1)
                                                        (("2"
                                                          (case
                                                           "tca = -(vect2(s)*vect2(v))/sqv(vect2(v))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             (2 3))
                                                            (("2"
                                                              (replace
                                                               -7
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "tcpa"
                                                                 1)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "horizontal_tca")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (lemma
                                                             "vectors_2D.sqv_eq_0")
                                                            (("3"
                                                              (inst?)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1 +)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (name
                                                           "A"
                                                           "sqrt(discr(a, b, c)) / (2 * a)")
                                                          (("2"
                                                            (case
                                                             "A>=0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "A"
                                                               1)
                                                              (("2"
                                                                (cross-mult
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("4"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "vectors_2D.sqv_eq_0")
                                                  (("2"
                                                    (inst - "v")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (case "Delta[DTHR](s,v)>=0")
                                        (("1"
                                          (rewrite "Delta_equiv")
                                          (("1"
                                            (replaces -5 1)
                                            (("1"
                                              (replaces -5 1)
                                              (("1"
                                                (replaces -5 1)
                                                (("1"
                                                  (hide-all-but (-1 +))
                                                  (("1"
                                                    (grind
                                                     :exclude
                                                     ("sqv" "vect2"))
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "Delta_ge_0_2[DTHR]")
                                          (("2"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "sqrt_le"
                                                     1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (rewrite
                                                       "sqrt_sqv_norm")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (lemma "vectors_2D.sqv_eq_0")
                                        (("3"
                                          (inst - "v")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "horizontal_wcv_norm" :assert? none)
          (("2" (lift-if)
            (("2" (split -)
              (("1" (flatten)
                (("1" (case "vect2(v)=zero")
                  (("1" (replaces -1)
                    (("1" (assert)
                      (("1" (cross-mult -2)
                        (("1" (assert)
                          (("1" (expand "horizontal_WCV")
                            (("1" (flatten)
                              (("1"
                                (rewrite "sqrt_le" 1 :dir rl)
                                (("1"
                                  (rewrite "sqrt_sqv_norm")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split -)
                    (("1" (assert)
                      (("1" (lemma "vectors_2D.sqv_eq_0")
                        (("1" (inst - "v")
                          (("1" (assert)
                            (("1" (rewrite "sq_eq" -1 :dir rl)
                              (("1" (rewrite "sq_norm") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "tcpa")
                        (("2" (lemma "horizontal_tca_min")
                          (("2" (inst - _ _ "0")
                            (("2" (inst - "v" "s")
                              (("2"
                                (rewrite "horizontal_sq_dtca_eq")
                                (("2"
                                  (rewrite "sqrt_le" -1 :dir rl)
                                  (("2"
                                    (rewrite "sqrt_sqv_norm")
                                    (("2"
                                      (rewrite "sqrt_sqv_norm")
                                      (("2"
                                        (cross-mult -3)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "horizontal_WCV")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (rewrite
                                                 "sq_le"
                                                 -3
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (rewrite "sq_norm")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2"
                  (case "NOT norm(vect2(s) + tcpa(vect2(s), vect2(v)) * vect2(v)) <= DTHR")
                  (("1" (hide 4)
                    (("1" (assert) (("1" (cross-mult -1) nil nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (skoletin -2)
                      (("2" (skoletin -)
                        (("2" (skoletin -)
                          (("2" (skoletin -)
                            (("2" (skoletin -)
                              (("2"
                                (skoletin -)
                                (("2"
                                  (case "NOT tcadist<=DTHR")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (replace -1)
                                    (("2"
                                      (skoletin -2)
                                      (("2"
                                        (skoletin -)
                                        (("2"
                                          (case "discr(a,b,c)>=0")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (lemma
                                                 "quadratic_le_0")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (inst - "0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case "c<=0")
                                                        (("1"
                                                          (expand
                                                           "horizontal_WCV")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 +)
                                                                (("1"
                                                                  (rewrite
                                                                   "sqrt_le"
                                                                   1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "sqrt_sqv_norm")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "tau_mod_divs")
                                                                  (("2"
                                                                    (case
                                                                     "NOT taumod[TTHR,DTHR] = taumod[TTHR, DTHR]")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (insteep
                                                                       -)
                                                                      (("2"
                                                                        (replaces
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (expand
                                                                           "divs?")
                                                                          (("2"
                                                                            (insteep
                                                                             -)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (case
                                                                   "NOT taumod[TTHR,DTHR] = taumod[TTHR, DTHR]")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (replaces
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "taumod"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "tau_mod_def")
                                                                        (("2"
                                                                          (cross-mult
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "NOT a>0")
                                                            (("1"
                                                              (lemma
                                                               "vectors_2D.sqv_eq_0")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "v")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "root(a,b,c,1)>=tca AND tca>=0")
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (split
                                                                   +)
                                                                  (("1"
                                                                    (expand
                                                                     "root"
                                                                     1)
                                                                    (("1"
                                                                      (case
                                                                       "NOT root(a,b,c,1) = tca+sqrt(discr(a,b,c))/(2*a)-TTHR/2")
                                                                      (("1"
                                                                        (case
                                                                         "tca-TTHR/2 = -b/(2*a)")
                                                                        (("1"
                                                                          (expand
                                                                           "root"
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -9
                                                                           1)
                                                                          (("2"
                                                                            (case
                                                                             "tca = -(vect2(s)*vect2(v))/sqv(vect2(v))")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "tcpa"
                                                                                   1)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "horizontal_tca")
                                                                                        (("1"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -12
                                                                                             2)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -13
                                                                                               2)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   (3
                                                                                                    4
                                                                                                    6))
                                                                                                  (("1"
                                                                                                    (field)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -9
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "tcpa"
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "horizontal_tca")
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (ground)
                                                                                        (("2"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "root"
                                                                         -1)
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (case
                                                                             "sqrt(discr(a, b, c)) >=a*TTHR")
                                                                            (("1"
                                                                              (mult-by
                                                                               -1
                                                                               "1/a")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (cross-mult
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "sq_ge"
                                                                                 1
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (expand
                                                                                   "discr"
                                                                                   1)
                                                                                  (("2"
                                                                                    (case
                                                                                     "Delta[DTHR](s,v)>=0")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "Delta_equiv")
                                                                                      (("1"
                                                                                        (invoke
                                                                                         (name
                                                                                          "DD"
                                                                                          "%1")
                                                                                         (!
                                                                                          -1
                                                                                          1))
                                                                                        (("1"
                                                                                          (case
                                                                                           "NOT sq(b) - 4 * (a * c) = 4*DD+sq(TTHR)*sq(sqv(vect2(v)))")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -12
                                                                                             1)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -12
                                                                                               1)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -12
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "DD"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (grind
                                                                                                       :exclude
                                                                                                       ("sqv"
                                                                                                        "vect2"))
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -15
                                                                                               :dir
                                                                                               rl)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "sq_times")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "Delta_ge_0_2[DTHR]")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "sqrt_le"
                                                                                                 1
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "sqrt_sqv_norm")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -9
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "tcpa"
                                                                       1)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (ground)
                                                                          (("2"
                                                                            (expand
                                                                             "horizontal_tca")
                                                                            (("2"
                                                                              (cross-mult
                                                                               2)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "tca>thisroot")
                                                (("1"
                                                  (both-sides
                                                   "-"
                                                   "1"
                                                   -2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (cross-mult -2)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "NOT thisroot = tca-sqrt(discr(a,b,c))/(2*a)-TTHR/2")
                                                  (("1"
                                                    (replace -4 1)
                                                    (("1"
                                                      (case
                                                       "tca-TTHR/2 = -b/(2*a)")
                                                      (("1"
                                                        (expand
                                                         "root"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -9 1)
                                                        (("2"
                                                          (case
                                                           "tca = -(vect2(s)*vect2(v))/sqv(vect2(v))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -11
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (field)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             (2 3))
                                                            (("2"
                                                              (replace
                                                               -7
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "tcpa"
                                                                 1)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "horizontal_tca")
                                                                      (("2"
                                                                        (ground)
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (lemma
                                                             "vectors_2D.sqv_eq_0")
                                                            (("3"
                                                              (inst?)
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (replaces
                                                                   -1)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1 +)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (name
                                                           "A"
                                                           "sqrt(discr(a, b, c)) / (2 * a)")
                                                          (("2"
                                                            (case
                                                             "A>=0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "A"
                                                               1)
                                                              (("2"
                                                                (cross-mult
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    (("3"
                                                      (lemma
                                                       "vectors_2D.sqv_eq_0")
                                                      (("3"
                                                        (inst - "v")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (replaces
                                                             -1)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "a_gt_0_discr_ge_0")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst - "tcpa(s,v)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split +)
                                                      (("1"
                                                        (lemma
                                                         "vectors_2D.sqv_eq_0")
                                                        (("1"
                                                          (inst - "v")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (name
                                                         "tt"
                                                         "tcpa(s,v)")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (case
                                                             "NOT a * sq(tt) + b * tt + c=sqv(vect2(s+tt*v)) - sq(DTHR) + TTHR * (vect2(s+tt*v) * vect2(v))")
                                                            (("1"
                                                              (replace
                                                               -8
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -9
                                                                 1)
                                                                (("1"
                                                                  (replace
                                                                   -10
                                                                   1)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (case
                                                                 "(vect2(s + tt * v) * vect2(v)) = 0")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (both-sides
                                                                       "+"
                                                                       "sq(DTHR)"
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (rewrite
                                                                           "sqrt_le"
                                                                           1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (rewrite
                                                                             "sqrt_sqv_norm")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "vect2_add"
                                                                                 1)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "vect2_scal")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "horizontal_tca_dot_zero")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "v"
                                                                       "s")
                                                                      (("1"
                                                                        (case
                                                                         "tcpa(s,v) = horizontal_tca(s,v)")
                                                                        (("1"
                                                                          (replaces
                                                                           -1
                                                                           :dir
                                                                           rL)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replaces
                                                                               -2)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  1))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "tcpa"
                                                                           1)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (split
                                                                               +)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (tcpa const-decl "real" timevars "WellClear/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors_2D "vectors/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (discr const-decl "real" quadratic "reals/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign "reals/")
    (root const-decl "real" quadratic "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (Delta_ge_0_2 formula-decl nil horizontal "ACCoRD/")
    (sqrt_sqv_norm formula-decl nil vectors_2D "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (Delta_equiv formula-decl nil horizontal "ACCoRD/")
    (Delta const-decl "real" horizontal "ACCoRD/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (timevar? const-decl "bool" timevars "WellClear/")
    (TimeVar type-eq-decl nil timevars "WellClear/")
    (quadratic const-decl "real" quadratic "reals/")
    (quadratic_le_0 formula-decl nil quadratic "reals/")
    (div_mult_neg_le1 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (tau_mod_def const-decl
     "{rr: real | s * v < 0 AND norm(s) >= DMOD IMPLIES rr >= 0}"
     tcas_tau "TCASII/")
    (quadratic_gt_0 formula-decl nil quadratic "reals/")
    (sq_sqrt formula-decl nil sqrt "reals/")
    (sq_1 formula-decl nil sq "reals/")
    (sqrt_le formula-decl nil sqrt "reals/")
    (sqrt_pos application-judgement "posreal" sqrt "reals/")
    (sqrt_1 formula-decl nil sqrt "reals/")
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (div_mult_pos_neg_ge1 formula-decl nil extra_real_props nil)
    (horizontal_tca const-decl "real" definitions "ACCoRD/")
    (sqrt_sq_neg formula-decl nil sqrt "reals/")
    (minus_real_is_real application-judgement "real" reals nil)
    (sqrt_sq formula-decl nil sqrt "reals/")
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (norm_zero formula-decl nil vectors_2D "vectors/")
    (sq_eq formula-decl nil sq "reals/")
    (sq_0 formula-decl nil sq "reals/")
    (sq_norm formula-decl nil vectors_2D "vectors/")
    (taumod_pre_timevar name-judgement "(pre_timevar?)"
     horizontal_WCV_taumod "WellClear/")
    (sqv_eq_0 formula-decl nil vectors_2D "vectors/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sq_le formula-decl nil sq "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (taumod const-decl "real" horizontal_WCV_taumod "WellClear/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (divs? const-decl "bool" wcv_fun nil)
    (tau_mod_divs formula-decl nil wcv_fun nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (add_zero_right formula-decl nil vectors_2D "vectors/")
    (scal_zero formula-decl nil vectors_2D "vectors/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (tcpa_timevar name-judgement "TimeVar" timevars "WellClear/")
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (horizontal_WCV const-decl "bool" horizontal_WCV "WellClear/")
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (horizontal_wcv_norm const-decl "nnreal" wcv_fun nil)
    (dot_zero_right formula-decl nil vectors_2D "vectors/")
    (horizontal_tca_min formula-decl nil definitions "ACCoRD/")
    (scal_0 formula-decl nil vectors_2D "vectors/")
    (horizontal_sq_dtca_eq formula-decl nil definitions "ACCoRD/")
    (cross_mult formula-decl nil real_props nil)
    (minus_div1 formula-decl nil real_props nil)
    (sq_times formula-decl nil sq "reals/")
    (sq_ge formula-decl nil sq "reals/")
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sqv_zero formula-decl nil vectors_2D "vectors/")
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd? const-decl "bool" integers nil)
    (both_sides_minus_le1 formula-decl nil real_props nil)
    (both_sides_plus_le2 formula-decl nil real_props nil)
    (neg_div_le formula-decl nil real_props nil)
    (horizontal_tca_dot_zero formula-decl nil definitions "ACCoRD/")
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (vect2_scal formula-decl nil vect_3D_2D "vectors/")
    (vect2_add formula-decl nil vect_3D_2D "vectors/")
    (* const-decl "Vector" vectors_3D "vectors/")
    (+ const-decl "Vector" vectors_3D "vectors/")
    (Vector type-eq-decl nil vectors_3D "vectors/")
    (a_gt_0_discr_ge_0 formula-decl nil quadratic "reals/"))
   nil)
  (horizontal_wcv_norm_def-1 nil 3666528482
   ("" (skeep*)
    (("" (split)
      (("1" (flatten)
        (("1" (label "thresh" -2)
          (("1" (expand "horizontal_wcv_norm" :assert? none)
            (("1" (lift-if)
              (("1" (split +)
                (("1" (flatten)
                  (("1" (case "vect2(v)=zero")
                    (("1" (hide -2)
                      (("1" (expand "horizontal_WCV")
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (case "sqv(vect2(s))<=sq(DTHR)")
                              (("1" (cross-mult 1) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (split -)
                      (("1" (lemma "vectors_2D.sqv_eq_0")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (rewrite "sq_eq" -1 :dir rl)
                              (("1" (rewrite "sq_norm") nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "horizontal_WCV")
                        (("2" (case "sqv(vect2(s)) <= sq(DTHR)")
                          (("1" (cross-mult 2)
                            (("1" (rewrite "sq_le" 2 :dir rl)
                              (("1"
                                (rewrite "sq_norm")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (lemma "tau_mod_divs")
                                (("2"
                                  (insteep -)
                                  (("2"
                                    (replace -7)
                                    (("2"
                                      (expand "divs?")
                                      (("2"
                                        (inst - "s" "v")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "taumod")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (case "vect2(v)=zero")
                    (("1" (replaces -1) (("1" (assert) nil nil)) nil)
                     ("2" (skoletin 4)
                      (("2" (skoletin 1)
                        (("2" (skoletin 1)
                          (("2" (skoletin 1)
                            (("2" (skoletin 1)
                              (("2"
                                (skoletin 1)
                                (("2"
                                  (case "tcadist <= DTHR")
                                  (("1"
                                    (case "discr(a, b, c) >= 0")
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (skoletin 1)
                                        (("1"
                                          (skoletin 1)
                                          (("1"
                                            (case "tca-thisroot>0")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (rewrite
                                                   "sq_le"
                                                   1
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "sq(xdist)<=1")
                                                      (("1"
                                                        (case
                                                         "sq(ydist)<=1")
                                                        (("1"
                                                          (mult-by
                                                           -1
                                                           "1-sq(xdist)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "sqrt_le"
                                                           1
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (rewrite
                                                             "sqrt_sq")
                                                            (("1"
                                                              (replace
                                                               -4
                                                               1)
                                                              (("1"
                                                                (cross-mult
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "tca>=0")
                                                              (("1"
                                                                (replace
                                                                 -5
                                                                 1)
                                                                (("1"
                                                                  (cross-mult
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -9
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "tcpa")
                                                                  (("2"
                                                                    (expand
                                                                     "horizontal_tca"
                                                                     1)
                                                                    (("2"
                                                                      (cross-mult
                                                                       1)
                                                                      (("2"
                                                                        (ground)
                                                                        (("2"
                                                                          (lemma
                                                                           "vectors_2D.sqv_eq_0")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma "sq_le")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "xdist"
                                                           "1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replace
                                                               -7
                                                               1)
                                                              (("2"
                                                                (cross-mult
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "NOT horizontal_WCV[TTHR, DTHR](tvar)(vect2(s), vect2(v))")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "horizontal_WCV"
                                                     -1)
                                                    (("2"
                                                      (case
                                                       "sqv(vect2(s)) <= sq(DTHR)")
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (name
                                                           "f"
                                                           "quadratic(a,b,c)")
                                                          (("1"
                                                            (case
                                                             "f(0)<=0")
                                                            (("1"
                                                              (lemma
                                                               "quadratic_le_0")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "a"
                                                                 "b"
                                                                 "c"
                                                                 "0")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "discr(a,b,c)>=0")
                                                                    (("1"
                                                                      (replace
                                                                       -12
                                                                       1)
                                                                      (("1"
                                                                        (case
                                                                         "taumod[TTHR,DTHR](s,v)<=TTHR")
                                                                        (("1"
                                                                          (expand
                                                                           "taumod"
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "tau_mod_def")
                                                                            (("1"
                                                                              (cross-mult
                                                                               -1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "taumod[TTHR,DTHR](s,v)<=0")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "taumod"
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "tau_mod_def")
                                                                              (("2"
                                                                                (cross-mult
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "discr")
                                                              (("2"
                                                                (case
                                                                 "c<=0")
                                                                (("1"
                                                                  (expand
                                                                   "f"
                                                                   1)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "taumod[TTHR,DTHR](s,v)<=TTHR")
                                                                  (("1"
                                                                    (expand
                                                                     "taumod"
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "tau_mod_def")
                                                                      (("1"
                                                                        (cross-mult
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "taumod[TTHR,DTHR](s,v)<=0")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "taumod")
                                                                      (("2"
                                                                        (expand
                                                                         "tau_mod_def")
                                                                        (("2"
                                                                          (cross-mult
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (lemma
                                                             "quadratic_gt_0")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "a"
                                                               "b"
                                                               "c"
                                                               "0")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "a > 0")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "NOT tvar = taumod[TTHR, DTHR]")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "taumod"
                                                                           -5)
                                                                          (("2"
                                                                            (expand
                                                                             "tau_mod_def")
                                                                            (("2"
                                                                              (cross-mult
                                                                               -5)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "vectors_2D.sqv_eq_0")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "v")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (case "a>0")
                                                (("1"
                                                  (case
                                                   "NOT thisroot = tca-sqrt(discr(a,b,c))/(2*a)-TTHR/2")
                                                  (("1"
                                                    (replace -3 1)
                                                    (("1"
                                                      (case
                                                       "tca-TTHR/2 = -b/(2*a)")
                                                      (("1"
                                                        (expand
                                                         "root"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -9 1)
                                                        (("2"
                                                          (case
                                                           "tca = -(vect2(s)*vect2(v))/sqv(vect2(v))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             (2 3))
                                                            (("2"
                                                              (replace
                                                               -7
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "tcpa"
                                                                 1)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "horizontal_tca")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (lemma
                                                             "vectors_2D.sqv_eq_0")
                                                            (("3"
                                                              (inst?)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1 +)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (name
                                                           "A"
                                                           "sqrt(discr(a, b, c)) / (2 * a)")
                                                          (("2"
                                                            (case
                                                             "A>=0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "A"
                                                               1)
                                                              (("2"
                                                                (cross-mult
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("4"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "vectors_2D.sqv_eq_0")
                                                  (("2"
                                                    (inst - "v")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (case "Delta[DTHR](s,v)>=0")
                                        (("1"
                                          (rewrite "Delta_equiv")
                                          (("1"
                                            (replaces -5 1)
                                            (("1"
                                              (replaces -5 1)
                                              (("1"
                                                (replaces -5 1)
                                                (("1"
                                                  (hide-all-but (-1 +))
                                                  (("1"
                                                    (grind
                                                     :exclude
                                                     ("sqv" "vect2"))
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "Delta_ge_0_2[DTHR]")
                                          (("2"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "sqrt_le"
                                                     1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (rewrite
                                                       "sqrt_sqv_norm")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (lemma "vectors_2D.sqv_eq_0")
                                        (("3"
                                          (inst - "v")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "horizontal_wcv_norm" :assert? none)
          (("2" (lift-if)
            (("2" (split -)
              (("1" (flatten)
                (("1" (case "vect2(v)=zero")
                  (("1" (replaces -1)
                    (("1" (assert)
                      (("1" (cross-mult -2)
                        (("1" (assert)
                          (("1" (expand "horizontal_WCV")
                            (("1" (flatten)
                              (("1"
                                (rewrite "sqrt_le" 1 :dir rl)
                                (("1"
                                  (rewrite "sqrt_sqv_norm")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split -)
                    (("1" (assert)
                      (("1" (lemma "vectors_2D.sqv_eq_0")
                        (("1" (inst - "v")
                          (("1" (assert)
                            (("1" (rewrite "sq_eq" -1 :dir rl)
                              (("1" (rewrite "sq_norm") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "tcpa")
                        (("2" (lemma "horizontal_tca_min")
                          (("2" (inst - _ _ "0")
                            (("2" (inst - "v" "s")
                              (("2"
                                (rewrite "horizontal_sq_dtca_eq")
                                (("2"
                                  (rewrite "sqrt_le" -1 :dir rl)
                                  (("2"
                                    (rewrite "sqrt_sqv_norm")
                                    (("2"
                                      (rewrite "sqrt_sqv_norm")
                                      (("2"
                                        (cross-mult -3)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "horizontal_WCV")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (rewrite
                                                 "sq_le"
                                                 -3
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (rewrite "sq_norm")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2"
                  (case "NOT norm(vect2(s) + tcpa(vect2(s), vect2(v)) * vect2(v)) <= DTHR")
                  (("1" (hide 4)
                    (("1" (assert) (("1" (cross-mult -1) nil nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (skoletin -2)
                      (("2" (skoletin -)
                        (("2" (skoletin -)
                          (("2" (skoletin -)
                            (("2" (skoletin -)
                              (("2"
                                (skoletin -)
                                (("2"
                                  (case "NOT tcadist<=DTHR")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (replace -1)
                                    (("2"
                                      (skoletin -2)
                                      (("2"
                                        (skoletin -)
                                        (("2"
                                          (case "discr(a,b,c)>=0")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (lemma
                                                 "quadratic_le_0")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (inst - "0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case "c<=0")
                                                        (("1"
                                                          (expand
                                                           "horizontal_WCV")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 +)
                                                                (("1"
                                                                  (rewrite
                                                                   "sqrt_le"
                                                                   1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "sqrt_sqv_norm")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "tau_mod_divs")
                                                                  (("2"
                                                                    (case
                                                                     "NOT tvar = taumod[TTHR, DTHR]")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (insteep
                                                                       -)
                                                                      (("2"
                                                                        (replaces
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (expand
                                                                           "divs?")
                                                                          (("2"
                                                                            (insteep
                                                                             -)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (case
                                                                   "NOT tvar = taumod[TTHR, DTHR]")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (replaces
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "taumod"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "tau_mod_def")
                                                                        (("2"
                                                                          (cross-mult
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "NOT a>0")
                                                            (("1"
                                                              (lemma
                                                               "vectors_2D.sqv_eq_0")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "v")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "root(a,b,c,1)>=tca AND tca>=0")
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (split
                                                                   +)
                                                                  (("1"
                                                                    (expand
                                                                     "root"
                                                                     1)
                                                                    (("1"
                                                                      (case
                                                                       "NOT root(a,b,c,1) = tca+sqrt(discr(a,b,c))/(2*a)-TTHR/2")
                                                                      (("1"
                                                                        (case
                                                                         "tca-TTHR/2 = -b/(2*a)")
                                                                        (("1"
                                                                          (expand
                                                                           "root"
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -9
                                                                           1)
                                                                          (("2"
                                                                            (case
                                                                             "tca = -(vect2(s)*vect2(v))/sqv(vect2(v))")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "tcpa"
                                                                                   1)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "horizontal_tca")
                                                                                        (("1"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -12
                                                                                             2)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -13
                                                                                               2)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   (3
                                                                                                    4
                                                                                                    6))
                                                                                                  (("1"
                                                                                                    (field)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -9
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "tcpa"
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "horizontal_tca")
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (ground)
                                                                                        (("2"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "root"
                                                                         -1)
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (case
                                                                             "sqrt(discr(a, b, c)) >=a*TTHR")
                                                                            (("1"
                                                                              (mult-by
                                                                               -1
                                                                               "1/a")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (cross-mult
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "sq_ge"
                                                                                 1
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (expand
                                                                                   "discr"
                                                                                   1)
                                                                                  (("2"
                                                                                    (case
                                                                                     "Delta[DTHR](s,v)>=0")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "Delta_equiv")
                                                                                      (("1"
                                                                                        (invoke
                                                                                         (name
                                                                                          "DD"
                                                                                          "%1")
                                                                                         (!
                                                                                          -1
                                                                                          1))
                                                                                        (("1"
                                                                                          (case
                                                                                           "NOT sq(b) - 4 * (a * c) = 4*DD+sq(TTHR)*sq(sqv(vect2(v)))")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -12
                                                                                             1)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -12
                                                                                               1)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -12
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "DD"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (grind
                                                                                                       :exclude
                                                                                                       ("sqv"
                                                                                                        "vect2"))
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -15
                                                                                               :dir
                                                                                               rl)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "sq_times")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "Delta_ge_0_2[DTHR]")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "sqrt_le"
                                                                                                 1
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "sqrt_sqv_norm")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -9
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "tcpa"
                                                                       1)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (ground)
                                                                          (("2"
                                                                            (expand
                                                                             "horizontal_tca")
                                                                            (("2"
                                                                              (cross-mult
                                                                               2)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "tca>thisroot")
                                                (("1"
                                                  (both-sides
                                                   "-"
                                                   "1"
                                                   -2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (cross-mult -2)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "NOT thisroot = tca-sqrt(discr(a,b,c))/(2*a)-TTHR/2")
                                                  (("1"
                                                    (replace -4 1)
                                                    (("1"
                                                      (case
                                                       "tca-TTHR/2 = -b/(2*a)")
                                                      (("1"
                                                        (expand
                                                         "root"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -9 1)
                                                        (("2"
                                                          (case
                                                           "tca = -(vect2(s)*vect2(v))/sqv(vect2(v))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -11
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (field)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             (2 3))
                                                            (("2"
                                                              (replace
                                                               -7
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "tcpa"
                                                                 1)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "horizontal_tca")
                                                                      (("2"
                                                                        (ground)
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (lemma
                                                             "vectors_2D.sqv_eq_0")
                                                            (("3"
                                                              (inst?)
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (replaces
                                                                   -1)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1 +)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (name
                                                           "A"
                                                           "sqrt(discr(a, b, c)) / (2 * a)")
                                                          (("2"
                                                            (case
                                                             "A>=0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "A"
                                                               1)
                                                              (("2"
                                                                (cross-mult
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    (("3"
                                                      (lemma
                                                       "vectors_2D.sqv_eq_0")
                                                      (("3"
                                                        (inst - "v")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (replaces
                                                             -1)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "a_gt_0_discr_ge_0")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst - "tcpa(s,v)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split +)
                                                      (("1"
                                                        (lemma
                                                         "vectors_2D.sqv_eq_0")
                                                        (("1"
                                                          (inst - "v")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (name
                                                         "tt"
                                                         "tcpa(s,v)")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (case
                                                             "NOT a * sq(tt) + b * tt + c=sqv(vect2(s+tt*v)) - sq(DTHR) + TTHR * (vect2(s+tt*v) * vect2(v))")
                                                            (("1"
                                                              (replace
                                                               -8
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -9
                                                                 1)
                                                                (("1"
                                                                  (replace
                                                                   -10
                                                                   1)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (case
                                                                 "(vect2(s + tt * v) * vect2(v)) = 0")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (both-sides
                                                                       "+"
                                                                       "sq(DTHR)"
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (rewrite
                                                                           "sqrt_le"
                                                                           1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (rewrite
                                                                             "sqrt_sqv_norm")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "vect2_add"
                                                                                 1)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "vect2_scal")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "horizontal_tca_dot_zero")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "v"
                                                                       "s")
                                                                      (("1"
                                                                        (case
                                                                         "tcpa(s,v) = horizontal_tca(s,v)")
                                                                        (("1"
                                                                          (replaces
                                                                           -1
                                                                           :dir
                                                                           rL)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replaces
                                                                               -2)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  1))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "tcpa"
                                                                           1)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (split
                                                                               +)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (tcpa const-decl "real" timevars "WellClear/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors_2D "vectors/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (discr const-decl "real" quadratic "reals/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign "reals/")
    (root const-decl "real" quadratic "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (Delta_ge_0_2 formula-decl nil horizontal "ACCoRD/")
    (sqrt_sqv_norm formula-decl nil vectors_2D "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (Delta_equiv formula-decl nil horizontal "ACCoRD/")
    (Delta const-decl "real" horizontal "ACCoRD/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (timevar? const-decl "bool" timevars "WellClear/")
    (TimeVar type-eq-decl nil timevars "WellClear/")
    (quadratic const-decl "real" quadratic "reals/")
    (quadratic_le_0 formula-decl nil quadratic "reals/")
    (div_mult_neg_le1 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (tau_mod_def const-decl
     "{rr: real | s * v < 0 AND norm(s) >= DMOD IMPLIES rr >= 0}"
     tcas_tau "TCASII/")
    (quadratic_gt_0 formula-decl nil quadratic "reals/")
    (sq_sqrt formula-decl nil sqrt "reals/")
    (sq_1 formula-decl nil sq "reals/")
    (sqrt_le formula-decl nil sqrt "reals/")
    (sqrt_pos application-judgement "posreal" sqrt "reals/")
    (sqrt_1 formula-decl nil sqrt "reals/")
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (div_mult_pos_neg_ge1 formula-decl nil extra_real_props nil)
    (horizontal_tca const-decl "real" definitions "ACCoRD/")
    (sqrt_sq_neg formula-decl nil sqrt "reals/")
    (minus_real_is_real application-judgement "real" reals nil)
    (sqrt_sq formula-decl nil sqrt "reals/")
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (norm_zero formula-decl nil vectors_2D "vectors/")
    (sq_eq formula-decl nil sq "reals/")
    (sq_0 formula-decl nil sq "reals/")
    (sq_norm formula-decl nil vectors_2D "vectors/")
    (sqv_eq_0 formula-decl nil vectors_2D "vectors/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sq_le formula-decl nil sq "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (divs? const-decl "bool" wcv_fun nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (taumod const-decl "real" horizontal_WCV_taumod "WellClear/")
    (tau_mod_divs formula-decl nil wcv_fun nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (add_zero_right formula-decl nil vectors_2D "vectors/")
    (scal_zero formula-decl nil vectors_2D "vectors/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (tcpa_timevar name-judgement "TimeVar" timevars "WellClear/")
    (taumod_pre_timevar name-judgement "(pre_timevar?)"
     horizontal_WCV_taumod "WellClear/")
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (horizontal_WCV const-decl "bool" horizontal_WCV "WellClear/")
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (horizontal_wcv_norm const-decl "nnreal" wcv_fun nil)
    (dot_zero_right formula-decl nil vectors_2D "vectors/")
    (horizontal_tca_min formula-decl nil definitions "ACCoRD/")
    (scal_0 formula-decl nil vectors_2D "vectors/")
    (horizontal_sq_dtca_eq formula-decl nil definitions "ACCoRD/")
    (cross_mult formula-decl nil real_props nil)
    (minus_div1 formula-decl nil real_props nil)
    (sq_times formula-decl nil sq "reals/")
    (sq_ge formula-decl nil sq "reals/")
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sqv_zero formula-decl nil vectors_2D "vectors/")
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd? const-decl "bool" integers nil)
    (both_sides_minus_le1 formula-decl nil real_props nil)
    (both_sides_plus_le2 formula-decl nil real_props nil)
    (neg_div_le formula-decl nil real_props nil)
    (horizontal_tca_dot_zero formula-decl nil definitions "ACCoRD/")
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (vect2_scal formula-decl nil vect_3D_2D "vectors/")
    (vect2_add formula-decl nil vect_3D_2D "vectors/")
    (* const-decl "Vector" vectors_3D "vectors/")
    (+ const-decl "Vector" vectors_3D "vectors/")
    (Vector type-eq-decl nil vectors_3D "vectors/")
    (a_gt_0_discr_ge_0 formula-decl nil quadratic "reals/"))
   shostak))
 (horizontal_wcv_norm_decreasing 0
  (horizontal_wcv_norm_decreasing-1 nil 3667036669
   ("" (skeep*) (("" (postpone) nil nil)) nil)
   ((sq_gt formula-decl nil sq "reals/")
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (discr const-decl "real" quadratic "reals/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (norm_eq_0 formula-decl nil vectors_2D "vectors/")
    (sqv_zero formula-decl nil vectors_2D "vectors/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (div_cancel4 formula-decl nil real_props nil)
    (horizontal_tca const-decl "real" definitions "ACCoRD/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (add_zero_right formula-decl nil vectors_3D "vectors/")
    (scal_0 formula-decl nil vectors_3D "vectors/")
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (dot_add_left formula-decl nil vectors_2D "vectors/")
    (dot_scal_left formula-decl nil vectors_2D "vectors/")
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (abs_nat formula-decl nil abs_lems "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (div_mult_pos_neg_ge1 formula-decl nil extra_real_props nil)
    (sqrt_sq_neg formula-decl nil sqrt "reals/")
    (sqrt_le formula-decl nil sqrt "reals/")
    (sqrt_pos application-judgement "posreal" sqrt "reals/")
    (sqrt_sq formula-decl nil sqrt "reals/")
    (sqrt_1 formula-decl nil sqrt "reals/")
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (sq_ge formula-decl nil sq "reals/")
    (sq_sqrt formula-decl nil sqrt "reals/")
    (sq_1 formula-decl nil sq "reals/")
    (sq_le formula-decl nil sq "reals/")
    (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sq_norm formula-decl nil vectors_2D "vectors/")
    (tcpa_timevar name-judgement "TimeVar" timevars "WellClear/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (root const-decl "real" quadratic "reals/")
    (Sign type-eq-decl nil sign "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (sqv_add formula-decl nil vectors_2D "vectors/")
    (dot_scal_canon formula-decl nil vectors_2D "vectors/")
    (times_div1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (sqv_scal formula-decl nil vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (tcpa const-decl "real" timevars "WellClear/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_eq_0 formula-decl nil vectors_2D "vectors/")
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dot_zero_right formula-decl nil vectors_2D "vectors/")
    (norm_zero formula-decl nil vectors_2D "vectors/")
    (scal_zero formula-decl nil vectors_2D "vectors/")
    (add_zero_right formula-decl nil vectors_2D "vectors/")
    (vect2_scal formula-decl nil vect_3D_2D "vectors/")
    (vect2_add formula-decl nil vect_3D_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D "vectors/")
    (+ const-decl "Vector" vectors_3D "vectors/")
    (* const-decl "Vector" vectors_3D "vectors/")
    (horizontal_wcv_norm const-decl "nnreal" wcv_fun nil))
   shostak))
 (horizontal_wcv_norm_increasing 0
  (horizontal_wcv_norm_increasing-1 nil 3667215448
   ("" (skeep*)
    (("" (expand "horizontal_wcv_norm")
      (("" (assert)
        ((""
          (case "norm(vect2(s + t1 * v)) <= norm(vect2(s + t2 * v))")
          (("1" (mult-by -1 "1/DTHR") (("1" (assert) nil nil)) nil)
           ("2" (hide 2)
            (("2" (lemma "sqv_increasing_after_horizontal_tca")
              (("2" (case "vect2(v)=zero")
                (("1" (hide -2)
                  (("1" (rewrite "vect2_add")
                    (("1" (rewrite "vect2_add")
                      (("1" (rewrite "vect2_scal")
                        (("1" (rewrite "vect2_scal")
                          (("1" (replaces -1) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst - "v" "s")
                  (("1" (assert)
                    (("1" (inst - "t2" "t1")
                      (("1" (assert)
                        (("1" (case "t1>=horizontal_tca(s,v)")
                          (("1" (assert)
                            (("1" (rewrite "vect2_add")
                              (("1"
                                (rewrite "vect2_add")
                                (("1"
                                  (rewrite "vect2_scal")
                                  (("1"
                                    (rewrite "vect2_scal")
                                    (("1"
                                      (rewrite "sq_le" 2 :dir rl)
                                      (("1"
                                        (rewrite "sq_norm")
                                        (("1"
                                          (rewrite "sq_norm")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1)
                            (("2" (hide 3)
                              (("2"
                                (expand "horizontal_tca")
                                (("2"
                                  (cross-mult 1)
                                  (("2"
                                    (ground)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (lemma "vectors_2D.sqv_eq_0")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (ground) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_nz_pos application-judgement "posreal" sq "reals/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (horizontal_wcv_norm const-decl "nnreal" wcv_fun nil)
    (* const-decl "Vector" vectors_3D "vectors/")
    (+ const-decl "Vector" vectors_3D "vectors/")
    (Vector type-eq-decl nil vectors_3D "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sqv_increasing_after_horizontal_tca formula-decl nil definitions
     "ACCoRD/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (horizontal_tca const-decl "real" definitions "ACCoRD/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (sq_le formula-decl nil sq "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (sq_norm formula-decl nil vectors_2D "vectors/")
    (div_mult_pos_neg_ge2 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors_2D "vectors/")
    (minus_real_is_real application-judgement "real" reals nil)
    (sqv_eq_0 formula-decl nil vectors_2D "vectors/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (scal_zero formula-decl nil vectors_2D "vectors/")
    (add_zero_right formula-decl nil vectors_2D "vectors/")
    (vect2_scal formula-decl nil vect_3D_2D "vectors/")
    (vect2_add formula-decl nil vect_3D_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (box_norm_no_double_min 0
  (box_norm_no_double_min-1 nil 3667314227
   ("" (skeep*)
    (("" (typepred "g")
      (("" (typepred "f")
        (("" (expand "no_double_min?")
          (("" (skolem 1 ("t1" "t2"))
            (("" (flatten)
              (("" (skeep*)
                ((""
                  (case "f(t1)<1 AND g(t1)<1 AND f(t2)<1 AND g(t2)<1 AND f(tt)<1 AND g(tt)<1")
                  (("1" (flatten)
                    (("1" (expand "box_norm")
                      (("1" (assert)
                        (("1" (lift-if)
                          (("1" (lift-if)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil)
                                 ("3" (grind) nil nil)
                                 ("4" (grind) nil nil)
                                 ("5" (grind) nil nil)
                                 ("6" (grind) nil nil)
                                 ("7" (grind) nil nil)
                                 ("8"
                                  (hide (1 3 4 5))
                                  (("8"
                                    (rewrite "sqrt_le")
                                    (("8"
                                      (rewrite "sqrt_le")
                                      (("8" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (wcv_norm_TCC1 0
  (wcv_norm_TCC1-1 nil 3667135867
   ("" (skeep*)
    (("" (case "1-sq(hnorm)>=0")
      (("1" (mult-by -1 "sq(vnorm)") (("1" (assert) nil nil)) nil)
       ("2" (case "hnorm<=1")
        (("1" (mult-ineq -1 -1)
          (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs_nat formula-decl nil abs_lems "reals/")
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (<= const-decl "bool" reals nil))
   nil))
 (WCV_norm_def 0
  (WCV_norm_def-1 nil 3666700814
   ("" (skeep*)
    (("" (expand "wcv_norm" :assert? none)
      (("" (skoletin 1)
        (("" (skoletin 1)
          (("" (skoletin 1)
            (("" (lift-if)
              (("" (split +)
                (("1" (flatten)
                  (("1" (expand "WCV")
                    (("1" (lemma "horizontal_wcv_norm_def")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (replace -5 :dir rl)
                            (("1" (lemma "vertical_wcv_norm_def")
                              (("1"
                                (inst?)
                                (("1"
                                  (replace -5 :dir rl)
                                  (("1"
                                    (hide (-5 -6))
                                    (("1"
                                      (expand "max")
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (ground)
                                          (("1"
                                            (expand "horizontal_WCV")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -)
                                                (("1"
                                                  (expand "tcpa")
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (lemma
                                                         "horizontal_tca_min")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "v"
                                                           "s"
                                                           "0")
                                                          (("1"
                                                            (rewrite
                                                             "horizontal_sq_dtca_eq")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 "sq_le"
                                                                 2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (rewrite
                                                                   "sq_norm")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "sq_le"
                                                         1
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (rewrite
                                                           "sq_norm")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       "sq_le"
                                                       4
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (rewrite
                                                         "sq_norm")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (case "NOT (vnorm<=1 AND hnorm<=1)")
                    (("1" (assert) nil nil)
                     ("2" (flatten)
                      (("2" (hide -3)
                        (("2"
                          (case "NOT sqrt(sq(hnorm) + (1 - sq(hnorm)) * sq(vnorm)) <= 1")
                          (("1" (rewrite "sq_le" 1 :dir rl)
                            (("1" (hide 3)
                              (("1"
                                (assert)
                                (("1"
                                  (case "sq(vnorm)<=1")
                                  (("1"
                                    (mult-by -1 "1-sq(hnorm)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (mult-ineq -3 -3)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (mult-ineq -1 -1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (lemma "horizontal_wcv_norm_def")
                              (("2"
                                (expand "WCV")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "vertical_wcv_norm_def")
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wcv_norm const-decl "nnreal" wcv_fun nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs_nat formula-decl nil abs_lems "reals/")
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (sq_sqrt formula-decl nil sqrt "reals/")
    (sq_1 formula-decl nil sq "reals/")
    (horizontal_wcv_norm_def formula-decl nil wcv_fun nil)
    (tcpa_timevar name-judgement "TimeVar" timevars "WellClear/")
    (vertical_wcv_norm_def formula-decl nil wcv_fun nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (tcpa const-decl "real" timevars "WellClear/")
    (add_zero_right formula-decl nil vectors_2D "vectors/")
    (scal_0 formula-decl nil vectors_2D "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (sq_norm formula-decl nil vectors_2D "vectors/")
    (sq_le formula-decl nil sq "reals/")
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (horizontal_tca const-decl "real" definitions "ACCoRD/")
    (horizontal_sq_dtca_eq formula-decl nil definitions "ACCoRD/")
    (horizontal_tca_min formula-decl nil definitions "ACCoRD/")
    (horizontal_WCV const-decl "bool" horizontal_WCV "WellClear/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil)
    (WCV const-decl "bool" WCV "WellClear/")
    (TimeVar type-eq-decl nil timevars "WellClear/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (vertical_wcv_norm const-decl "nnreal" wcv_fun nil)
    (horizontal_wcv_norm const-decl "nnreal" wcv_fun nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (taumod_pre_timevar name-judgement "(pre_timevar?)"
     horizontal_WCV_taumod "WellClear/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (timevar? const-decl "bool" timevars "WellClear/")
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (taumod const-decl "real" horizontal_WCV_taumod "WellClear/"))
   shostak))
 (wcv_norm_0 0
  (wcv_norm_0-1 nil 3666943701
   ("" (skeep*)
    (("" (ground)
      (("1" (expand "wcv_norm" :assert? none)
        (("1" (skoletin -)
          (("1" (skoletin -)
            (("1" (skoletin -)
              (("1" (lift-if)
                (("1" (ground)
                  (("1" (case "hnorm=0 AND vnorm=0")
                    (("1" (flatten)
                      (("1" (case "vect2(s)=zero AND s`z=0")
                        (("1" (hide-all-but (-1 2))
                          (("1" (flatten)
                            (("1"
                              (case "s+zero = (# x:= vect2(s)`x,y:=vect2(s)`y,z:=s`z #)")
                              (("1"
                                (assert)
                                (("1"
                                  (replaces -2)
                                  (("1"
                                    (replaces -2)
                                    (("1"
                                      (decompose-equality +)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (decompose-equality)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (split)
                            (("1" (replace -1)
                              (("1"
                                (hide (-1 -2 -3 -4 -5 2))
                                (("1"
                                  (expand
                                   "horizontal_wcv_norm"
                                   :assert?
                                   none)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split -)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lemma
                                           "vectors_2D.norm_eq_0")
                                          (("1"
                                            (inst - "s")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (skoletin -)
                                          (("2"
                                            (skoletin -)
                                            (("2"
                                              (skoletin -)
                                              (("2"
                                                (skoletin -)
                                                (("2"
                                                  (skoletin -)
                                                  (("2"
                                                    (skoletin -)
                                                    (("2"
                                                      (case
                                                       "tcadist<=DTHR")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (skoletin -2)
                                                          (("1"
                                                            (skoletin
                                                             -)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (split
                                                                 -)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (lemma
                                                                     "sqrt_eq_0")
                                                                    (("1"
                                                                      (case
                                                                       "sq(xdist) + (1 - sq(xdist)) * sq(ydist)>=0")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "sq(xdist) + (1 - sq(xdist)) * sq(ydist)")
                                                                        (("1"
                                                                          (replace
                                                                           -4
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (case
                                                                               "FORALL (aa,bb:nnreal): aa+bb=0 IMPLIES (aa=0 AND bb=0)")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "sq_eq_0")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "sq_eq_0")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "ydist")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -8
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (cross-mult
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -12
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "vectors_2D.norm_eq_0")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "s")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "nnreal_times_nnreal_is_nnreal")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "1-sq(xdist)"
                                                                                     "sq(ydist)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "xdist<=1")
                                                                                      (("1"
                                                                                        (copy
                                                                                         -1)
                                                                                        (("1"
                                                                                          (mult-ineq
                                                                                           -1
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "sq"
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -7
                                                                                         1)
                                                                                        (("2"
                                                                                          (cross-mult
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (rewrite
                                                                         "nnreal_plus_nnreal_is_nnreal"
                                                                         1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (both-sides
                                                                     "-"
                                                                     "1"
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (cross-mult
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "NOT tca = 0")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               -7
                                                                               -1)
                                                                              (("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "vectors_2D.norm_eq_0")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "s")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "tcpa")
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (ground)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "horizontal_tca")
                                                                                                (("1"
                                                                                                  (cross-mult
                                                                                                   -1)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (iff)
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace 1)
                                                        (("2"
                                                          (skoletin -)
                                                          (("2"
                                                            (skoletin
                                                             -)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide -1)
                                (("2"
                                  (expand "vertical_wcv_norm")
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (ground)
                                      (("2"
                                        (expand "min")
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (case
                                                 "tcoa(s`z, v`z)<0")
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "abs(s`z)/ZTHR=0")
                                                      (("1"
                                                        (cross-mult -1)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind
                                                         :exclude
                                                         "horizontal_wcv_norm")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "max")
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (ground)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("2"
                                                              (case
                                                               "tcoa(s`z,v`z)=0")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "tcoa(s`z,v`z)>0")
                                                                (("1"
                                                                  (mult-by
                                                                   -1
                                                                   "1/TCOA")
                                                                  (("1"
                                                                    (grind
                                                                     :exclude
                                                                     "horizontal_wcv_norm")
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (split)
                                                                    (("1"
                                                                      (cross-mult
                                                                       1)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (cross-mult
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "sqrt_eq_0")
                      (("2"
                        (case "sq(hnorm) + (1 - sq(hnorm)) * sq(vnorm)>=0")
                        (("1"
                          (inst -
                           "sq(hnorm) + (1 - sq(hnorm)) * sq(vnorm)")
                          (("1" (replace -3)
                            (("1" (hide -1)
                              (("1"
                                (case
                                 "FORALL (aa,bb:nnreal): aa+bb=0 IMPLIES (aa=0 AND bb=0)")
                                (("1"
                                  (inst
                                   -
                                   "sq(hnorm)"
                                   "(1 - sq(hnorm)) * sq(vnorm)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (lemma "sq_eq_0")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "nnreal_times_nnreal_is_nnreal")
                                    (("2"
                                      (inst
                                       -
                                       "1-sq(hnorm)"
                                       "sq(vnorm)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (case "hnorm<=1")
                                        (("1"
                                          (copy -1)
                                          (("1"
                                            (mult-ineq -1 -1)
                                            (("1"
                                              (expand "sq" 1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (rewrite "nnreal_plus_nnreal_is_nnreal" 1)
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (replace -1)
        (("2" (expand "wcv_norm")
          (("2" (expand "max")
            (("2" (lift-if)
              (("2" (ground)
                (("1" (hide -1)
                  (("1" (expand "vertical_wcv_norm")
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (ground)
                          (("1" (grind) nil nil)
                           ("2" (hide 1) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (horizontal_wcv_norm const-decl "nnreal" wcv_fun nil)
    (vertical_wcv_norm const-decl "nnreal" wcv_fun nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sqrt_square formula-decl nil sqrt "reals/")
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (max_npreal_0 formula-decl nil min_max "reals/")
    (tcoa const-decl "real" timevars "WellClear/")
    (< const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (norm_eq_0 formula-decl nil vectors_2D "vectors/")
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (tcpa const-decl "real" timevars "WellClear/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (<= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (discr const-decl "real" quadratic "reals/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign "reals/")
    (root const-decl "real" quadratic "reals/")
    (tcpa_timevar name-judgement "TimeVar" timevars "WellClear/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (minus_real_is_real application-judgement "real" reals nil)
    (horizontal_tca const-decl "real" definitions "ACCoRD/")
    (dot_zero_right formula-decl nil vectors_2D "vectors/")
    (sqv_zero formula-decl nil vectors_2D "vectors/")
    (div_cancel4 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd? const-decl "bool" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs_nat formula-decl nil abs_lems "reals/")
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (sq_eq_0 formula-decl nil sq "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_0 formula-decl nil sq "reals/")
    (sqrt_sq formula-decl nil sqrt "reals/")
    (scal_0 formula-decl nil vectors_2D "vectors/")
    (add_zero_right formula-decl nil vectors_2D "vectors/")
    (div_cancel3 formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (sqrt_eq_0 formula-decl nil sqrt "reals/")
    (Vector type-eq-decl nil vectors_3D "vectors/")
    (+ const-decl "Vector" vectors_3D "vectors/")
    (zero const-decl "Vector" vectors_3D "vectors/")
    (comp_zero_x formula-decl nil vectors_3D "vectors/")
    (comp_zero_x formula-decl nil vectors_2D "vectors/")
    (comp_zero_y formula-decl nil vectors_2D "vectors/")
    (comp_zero_y formula-decl nil vectors_3D "vectors/")
    (comp_zero_z formula-decl nil vectors_3D "vectors/")
    (add_zero_right formula-decl nil vectors_3D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (wcv_norm const-decl "nnreal" wcv_fun nil)
    (sqrt_0 formula-decl nil sqrt "reals/")
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   shostak))
 (B_TCC1 0
  (B_TCC1-1 nil 3667659762 ("" (subtype-tcc) nil nil) nil nil))
 (C_TCC1 0
  (C_TCC1-1 nil 3667659762 ("" (subtype-tcc) nil nil) nil nil))
 (fooloo2_TCC1 0
  (fooloo2_TCC1-1 nil 3667659762 ("" (subtype-tcc) nil nil) nil nil))
 (fooloo2 0
  (fooloo2-1 nil 3667659805
   ("" (skeep*)
    (("" (expand "discr")
      (("" (expand "sq")
        (("" (expand "B")
          (("" (expand "A")
            (("" (expand "C")
              (("" (name "S" "vect2(s)")
                (("" (replace -1)
                  (("" (name "V" "vect2(v)")
                    (("" (replaces -1)
                      (("" (hide -1)
                        (("" (assert)
                          ((""
                            (case "-2 * ( (S * V) * D ^ 2 * -T) -
                            2 * ( (S * V) * D ^ 2 * T)
                            -  (sqv(S) * sqv(V) * -T * T)
                            +  (D ^ 2 * D ^ 2)
                            + 2 * ((S * V) ^ 2 * -T * T)
                            +  ((S * V) * (S * V) * T * T)
                            = X")
                            (("1" (assert) nil)
                             ("2" (hide 2)
                              (("2"
                                (assert)
                                (("2"
                                  (assert)
                                  (("2"
                                    (case
                                     "(D ^ 2 * D ^ 2)
                         - (sqv(S) * sqv(V) * -T * T)
                         + 2 * ((S * V) ^ 2 * -T * T)
                         + ((S * V) * (S * V) * T * T)
                         = X")
                                    (("1" (assert) nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (case
                                         "(D ^ 2 * D ^ 2) - (sqv(S) * sqv(V) * -T * T)
                             - ((S * V) * (S * V) * T * T)=X")
                                        (("1" (grind) nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma "Delta[D]")
                                            (("1"
                                              (lemma "Delta_equiv[D]")
                                              (("1"
                                                (inst - "S" "T*V")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "sqv_scal")
                                                    (("1"
                                                      (rewrite
                                                       "sq_times"
                                                       -1)
                                                      (("1"
                                                        (expand "sq" -)
                                                        (("1"
                                                          (expand "^")
                                                          (("1"
                                                            (expand
                                                             "expt")
                                                            (("1"
                                                              (expand
                                                               "expt")
                                                              (("1"
                                                                (expand
                                                                 "expt")
                                                                (("1"
                                                                  (case
                                                                   "NOT -1 * (sqv(S) * sqv(V) * -T * T) - ((S * V) * (S * V) * T * T) +
       D * D * D * D = sqv(S)*sqv(T*V)-sq(S*(T*V)) + sq(D)*sq(D)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (grind)
                                                                      nil)))
                                                                   ("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (lemma
                                                                       "Delta_equiv[D]")
                                                                      (("2"
                                                                        (postpone)
                                                                        nil)))))))))))))))))))))))))))
                                             ("2"
                                              (postpone)
                                              nil))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil))
 (testfun_TCC1 0
  (testfun_TCC1-1 nil 3666691204 ("" (subtype-tcc) nil nil)
   ((TTHRtest const-decl "posreal" wcv_fun nil)
    (TCOAtest const-decl "nnreal" wcv_fun nil)
    (DMODtest const-decl "posreal" wcv_fun nil)
    (ZTHRtest const-decl "posreal" wcv_fun nil)
    (stest const-decl "Vect3" wcv_fun nil)
    (vtest const-decl "Vect3" wcv_fun nil)
    (* const-decl "Vector" vectors_3D "vectors/")
    (+ const-decl "Vector" vectors_3D "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (vertical_wcv_norm const-decl "nnreal" wcv_fun nil)
    (max_nnreal_0 formula-decl nil min_max "reals/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (tfuntest_TCC1 0
  (tfuntest_TCC1-1 nil 3666429293 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (tfuntest_TCC2 0
  (tfuntest_TCC2-1 nil 3666429293 ("" (termination-tcc) nil nil) nil
   nil))
 (foo 0
  (foo-1 nil 3666429295
   ("" (name "AA" "testfun(0)")
    (("" (name "BB" "testfun(5)")
      (("" (hide +)
        (("" (expand "testfun")
          (("" (expand "wcv_norm")
            (("" (assert)
              (("" (name "stest5" "stest + 5 * vtest")
                (("" (replaces -1)
                  (("" (expand "max" -1 1)
                    (("" (name "tmod5" "170/27")
                      (("" (name "tmod0" "925/63")
                        ((""
                          (case "tmod5 = tau_mod(vect2(stest5), vect2(vtest))")
                          (("1" (replaces -1 :dir rl)
                            (("1"
                              (case "tmod0 = tau_mod(vect2(stest), vect2(vtest))")
                              (("1"
                                (replaces -1 :dir rl)
                                (("1"
                                  (hide (-1 -2))
                                  (("1"
                                    (eval-expr
                                     "min(sqv(vect2(stest5)) / sq(DMODtest),
             max(sqv(vect2(stest5) +
                      tcpa(vect2(stest5), vect2(vtest)) * vect2(vtest))
                  / sq(DMODtest),
                 max(1 - tmod5 / TAUMODtest, tmod5 / TAUMODtest)))
          < tcoa_norm_fun(ZTHRtest, TCOAtest)(stest5`z, vtest`z)")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (expand "max" -2 1)
                                        (("1"
                                          (eval-expr
                                           "min(sqv(vect2(stest)) / sq(DMODtest),
             max(sqv(vect2(stest) +
                      tcpa(vect2(stest), vect2(vtest)) * vect2(vtest))
                  / sq(DMODtest),
                 max(1 - tmod0 / TAUMODtest, tmod0 / TAUMODtest)))
          < tcoa_norm_fun(ZTHRtest, TCOAtest)(stest`z, vtest`z)")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (expand "min" -1 1)
                                              (("1"
                                                (eval-expr
                                                 "sqv(vect2(stest5)) / sq(DMODtest) >
          max(sqv(vect2(stest5) +
                   tcpa(vect2(stest5), vect2(vtest)) * vect2(vtest))
               / sq(DMODtest),
              max(1 - tmod5 / TAUMODtest, tmod5 / TAUMODtest))")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (expand "min" -2 1)
                                                    (("1"
                                                      (eval-expr
                                                       "sqv(vect2(stest)) / sq(DMODtest) >
          max(sqv(vect2(stest) +
                   tcpa(vect2(stest), vect2(vtest)) * vect2(vtest))
               / sq(DMODtest),
              max(1 - tmod0 / TAUMODtest, tmod0 / TAUMODtest))")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (expand
                                                           "max"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (invoke
                                                             (eval-expr
                                                              "%1")
                                                             (!
                                                              -1
                                                              1
                                                              1))
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "max"
                                                                 -2
                                                                 1)
                                                                (("1"
                                                                  (invoke
                                                                   (eval-expr
                                                                    "%1")
                                                                   (!
                                                                    -2
                                                                    1
                                                                    1))
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil)
                           ("3" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

