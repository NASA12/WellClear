(bands_out
 (xml_band_init_TCC1 0
  (xml_band_init_TCC1-1 nil 3644664679
   ("" (skeep)
    (("" (typepred (regions))
      (("" (skeep)
        (("" (ground)
          (("" (expand "length") (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((Region type-decl nil format_bands nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list type-decl nil list_adt nil)
    (RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (xml_band_init_TCC2 0
  (xml_band_init_TCC2-1 nil 3644664679 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (Region type-decl nil format_bands nil))
   nil))
 (xml_band_init_TCC3 0
  (xml_band_init_TCC3-1 nil 3644664679
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (skeep)
              (("" (hide -5)
                (("" (replaces -3)
                  (("" (replaces -3)
                    (("" (typepred (regions))
                      (("" (hide -3)
                        (("" (hide -2)
                          (("" (expand "length" -1)
                            (("" (lift-if -1)
                              ((""
                                (split -1)
                                (("1" (flatten) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lift-if -1)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1" (ground) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (Region type-decl nil format_bands nil))
   nil))
 (xml_band_init_TCC4 0
  (xml_band_init_TCC4-1 nil 3644664679 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Region type-decl nil format_bands nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (O const-decl "finseq" finite_sequences nil)
    (concat const-decl "string" stdstr nil)
    (UndefinedMutableVariable const-decl "ExceptionTag[void]" stdprog
     nil)
    (fail const-decl "void" stdlang nil)
    (make_exc const-decl "Exception" stdexc nil)
    (val const-decl "T" stdprog nil)
    (to_str const-decl "string" pvsio_checker "PVSioChecker/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (xml_band_init_TCC5 0
  (xml_band_init_TCC5-1 nil 3644664679 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (Region type-decl nil format_bands nil))
   nil))
 (xml_bands_TCC1 0
  (xml_bands_TCC1-1 nil 3644664679 ("" (subtype-tcc) nil nil) nil nil))
 (xml_bands_TCC2 0
  (xml_bands_TCC2-1 nil 3644664679 ("" (subtype-tcc) nil nil) nil nil))
 (xml_bands_TCC3 0
  (xml_bands_TCC3-1 nil 3644664679 ("" (subtype-tcc) nil nil) nil nil))
 (kinematic_TCC1 0
  (kinematic_TCC1-1 nil 3644664679 ("" (subtype-tcc) nil nil) nil nil))
 (kinematic_TCC2 0
  (kinematic_TCC2-1 nil 3644664679 ("" (subtype-tcc) nil nil) nil nil))
 (kinematic_TCC3 0
  (kinematic_TCC3-1 nil 3644664679 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (update_ownship const-decl "Core" kinematic_core nil)
    (cd2bool const-decl "bool" los_and_cd nil)
    (delay? const-decl "bool" kinematic_core nil)
    (* const-decl "Vector" vectors_3D "vectors/")
    (+ const-decl "Vector" vectors_3D "vectors/")
    (delay_ac const-decl "Aircraft" kinematic_core nil)
    (delay_traf const-decl "Traffic" kinematic_core nil)
    (update_delay const-decl "Core" kinematic_core nil)
    (/= const-decl "boolean" notequal nil)
    (updated? const-decl "bool" kinematic_core nil))
   nil)))

