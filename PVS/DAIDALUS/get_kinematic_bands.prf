(get_kinematic_bands
 (first_time_it_TCC1 0
  (first_time_it_TCC1-1 nil 3636987289 ("" (subtype-tcc) nil nil) nil
   nil))
 (first_time_it_TCC2 0
  (first_time_it_TCC2-1 nil 3636987289 ("" (subtype-tcc) nil nil)
   ((nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (first_time_it_TCC3 0
  (first_time_it_TCC3-1 nil 3636987289 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (first_time_it_TCC4 0
  (first_time_it_TCC4-1 nil 3636987289 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (first_time_it_TCC5 0
  (first_time_it_TCC5-1 nil 3636987289 ("" (termination-tcc) nil nil)
   ((nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (first_time_it_TCC6 0
  (first_time_it_TCC6-1 nil 3636987289 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (first_time_it_TCC7 0
  (first_time_it_TCC7-1 nil 3636987289 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (first_time_it_TCC8 0
  (first_time_it_TCC8-1 nil 3636987289 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (first_time_it_TCC9 0
  (first_time_it_TCC9-1 nil 3636987289 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (first_time_it_TCC10 0
  (first_time_it_TCC10-1 nil 3636987289 ("" (termination-tcc) nil nil)
   ((nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (first_time_TCC1 0
  (first_time_TCC1-1 nil 3636987289 ("" (subtype-tcc) nil nil) nil
   nil))
 (first_time_TCC2 0
  (first_time_TCC2-1 nil 3636987289 ("" (subtype-tcc) nil nil) nil
   nil))
 (get_kinematic_track_bands_TCC1 0
  (get_kinematic_track_bands_TCC1-1 nil 3636987289
   ("" (subtype-tcc) nil nil) nil nil))
 (get_kinematic_track_bands_TCC2 0
  (get_kinematic_track_bands_TCC2-1 nil 3636987289
   ("" (subtype-tcc) nil nil) nil nil))
 (get_kinematic_track_bands_TCC3 0
  (get_kinematic_track_bands_TCC3-1 nil 3636987289
   ("" (subtype-tcc) nil nil) nil nil))
 (get_kinematic_track_bands_TCC4 0
  (get_kinematic_track_bands_TCC4-1 nil 3636987289
   ("" (subtype-tcc) nil nil) nil nil))
 (get_kinematic_track_bands_TCC5 0
  (get_kinematic_track_bands_TCC5-1 nil 3636987289
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (ConfDetector type-eq-decl nil kinematic_core nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign "reals/")
    (LoSDetector type-eq-decl nil kinematic_core nil)
    (MostUrgent type-eq-decl nil kinematic_core nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pi_lb const-decl "posreal" trig_basic "trig/")
    (pi_ub const-decl "posreal" trig_basic "trig/")
    (pi const-decl "{r: posreal | r > pi_lb AND r < pi_ub}" trig_basic
     "trig/")
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (round const-decl "{j: int | r - 1 / 2 < j AND j <= r + 1 / 2}"
           kinematic_track_bands nil)
    (red_band_exist const-decl "bool" kinematic_bands_exist nil)
    (red_exist_dir const-decl "bool" combine_bands nil)
    (any_red const-decl "bool" combine_bands nil)
    (any_kinematic_track_red const-decl "bool" kinematic_track_bands
     nil)
    (track const-decl "nnreal_lt_2pi" track_3D "../Util/")
    (bands_search_index const-decl "subrange(0, MaxN + 1)"
     kinematic_bands nil)
    (neg const-decl "listn[IntBand](length[IntBand](L))" int_bands nil)
    (kinematic_bands_combine const-decl "list[IntBand]" combine_bands
     nil)
    (add const-decl "listn[RealBand](length[RealBand](RL))" real_bands
     nil)
    (kinematic_track_bands_init const-decl "list[RealBand]"
     kinematic_track_bands nil)
    (kinematic_track_bands const-decl "list[RealBand]"
     kinematic_track_bands nil)
    (first_green const-decl
     "(first_green?(LOS, CD, B, T, so, vo, traj, MaxN, ts, AL, most_urgent, epsH,
              epsV, UseHCrit, UseVCrit, 0))" kinematic_bands_exist nil)
    (first_green_dir const-decl "(first_green?(LOS, CD, B, T, so, vo,
              (IF dir > 0 THEN trajr ELSE trajl ENDIF),
              (IF dir > 0 THEN MaxR ELSE MaxL ENDIF),
              (IF dir > 0 THEN tsr ELSE tsl ENDIF), AL, most_urgent, epsH,
              epsV, UseHCrit, UseVCrit, 0))" combine_bands nil)
    (all_red const-decl "bool" combine_bands nil)
    (all_kinematic_track_red const-decl "bool" kinematic_track_bands
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil)))

