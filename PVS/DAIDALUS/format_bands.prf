(format_bands
 (format_gen_it_TCC1 0
  (format_gen_it_TCC1-1 nil 3641299806
   ("" (skeep)
    (("" (skeep) (("" (typepred (bands)) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (list type-decl nil list_adt nil)
    (RealBand type-eq-decl nil real_bands nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (format_gen_it_TCC2 0
  (format_gen_it_TCC2-1 nil 3641299806
   ("" (skeep)
    (("" (skeep)
      (("" (typepred (formatted))
        (("" (expand "length" 1) (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (Region type-decl nil format_bands nil))
   nil))
 (format_gen_it_TCC3 0
  (format_gen_it_TCC3-1 nil 3641299806
   ("" (skeep)
    (("" (skeep)
      (("" (typepred (formatted))
        (("" (expand "length" 2)
          (("" (expand "length" 2) (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (Region type-decl nil format_bands nil))
   nil))
 (format_gen_it_TCC4 0
  (format_gen_it_TCC4-1 nil 3641299806
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (expand "length" 2 2)
              (("" (ground)
                (("" (typepred (bands))
                  (("" (ground)
                    (("" (lift-if 2)
                      (("" (ground) (("" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (list type-decl nil list_adt nil)
    (RealBand type-eq-decl nil real_bands nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (format_gen_it_TCC5 0
  (format_gen_it_TCC5-1 nil 3641299806
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Region type-decl nil format_bands nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (red const-decl "Region" format_bands nil))
   nil))
 (format_gen_it_TCC6 0
  (format_gen_it_TCC6-1 nil 3649068030
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (typepred (formatted))
            (("" (replaces -4)
              (("" (replaces -4)
                (("" (simplify 2)
                  (("" (expand "length" 2)
                    (("" (expand "length" 2) (("" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (Region type-decl nil format_bands nil))
   nil))
 (format_gen_it_TCC7 0
  (format_gen_it_TCC7-1 nil 3649068030
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (replaces -2)
            (("" (typepred (bands))
              (("" (expand "length" 2 2)
                (("" (lift-if 2)
                  (("" (ground)
                    (("" (expand "length") (("" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (list type-decl nil list_adt nil)
    (RealBand type-eq-decl nil real_bands nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (format_gen_it_TCC8 0
  (format_gen_it_TCC8-1 nil 3649068030
   ("" (skeep)
    (("" (typepred (bands))
      (("" (expand "length") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (list type-decl nil list_adt nil)
    (RealBand type-eq-decl nil real_bands nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (format_nonempty 0
  (format_nonempty-1 nil 3671896952
   (""
    (case "FORALL (n:nat, lower, upper: real,
              (bands: [list[RealBand], below(2)] | length(bands`1) > 0),
              formatted:
                {TL: [list[RealBand], list[Region]] |
                         length(TL`1) = length(TL`2)}):
        n=length(bands`1) IMPLIES
        cons?(format_gen_it(lower, upper, bands, formatted)`1)")
    (("1" (skeep)
      (("1" (inst?) (("1" (inst - "length(bands`1)") nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (typepred "bands") (("1" (assert) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (case "j=0")
            (("1" (hide -2)
              (("1" (replace -1)
                (("1" (simplify 1)
                  (("1" (skeep)
                    (("1" (expand "format_gen_it")
                      (("1" (expand "length" -2)
                        (("1" (lift-if -2)
                          (("1" (assert)
                            (("1" (ground)
                              (("1"
                                (lift-if 2)
                                (("1"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "format_gen_it" 2)
                (("2" (lift-if 2)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (split 1)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (inst?)
                        (("2" (expand "length" -2)
                          (("2" (lift-if -2) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((green const-decl "Region" format_bands nil)
    (red const-decl "Region" format_bands nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (Region type-decl nil format_bands nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (format_gen_it def-decl
     "{TL: [list[RealBand], list[Region]] | length(TL`1) = length(TL`2)}"
     format_bands nil))
   shostak))
 (format_gen_TCC1 0
  (format_gen_TCC1-1 nil 3641299806
   ("" (skeep)
    (("" (ground)
      (("" (expand "length")
        (("" (expand "length") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (length def-decl "nat" list_props nil))
   nil))
 (format_gen_TCC2 0
  (format_gen_TCC2-1 nil 3641299806
   ("" (skeep)
    (("" (skeep) (("" (skeep) (("" (grind) nil nil)) nil)) nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (format_gen_TCC3 0
  (format_gen_TCC3-1 nil 3649068030
   ("" (skeep) (("" (expand "length" 2) (("" (propax) nil nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)) nil))
 (format_gen_TCC4 0
  (format_gen_TCC4-1 nil 3649068030
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (replace -2)
          (("" (assert)
            (("" (lemma "length_reverse[RealBand]")
              (("" (inst?)
                (("" (case "NOT cons?[RealBand](preformatted`1)")
                  (("1" (hide (-1 3 -3))
                    (("1" (lemma "format_nonempty")
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand "length" -2) (("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (Region type-decl nil format_bands nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (format_nonempty formula-decl nil format_bands nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_reverse formula-decl nil list_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil))
   nil))
 (format_gen_TCC5 0
  (format_gen_TCC5-1 nil 3649068030
   ("" (skeep)
    (("" (skeep :preds? t)
      (("" (skeep)
        (("" (skeep)
          (("" (replace -3)
            (("" (simplify)
              (("" (rewrite "length_reverse")
                (("" (rewrite "length_reverse") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Region type-decl nil format_bands nil)
    (list type-decl nil list_adt nil)
    (length_reverse formula-decl nil list_props nil))
   nil))
 (format_gen_TCC6 0
  (format_gen_TCC6-1 nil 3649068030
   ("" (skeep)
    (("" (skeep :preds? t)
      (("" (skeep)
        (("" (skeep)
          (("" (expand "length" 3)
            (("" (replace -3)
              (("" (assert)
                (("" (rewrite "length_reverse")
                  (("" (rewrite "length_reverse") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_reverse formula-decl nil list_props nil)
    (list type-decl nil list_adt nil)
    (Region type-decl nil format_bands nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (length def-decl "nat" list_props nil))
   nil)))

