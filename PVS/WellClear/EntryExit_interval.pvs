EntryExit_interval[B:nnreal,T:{t:nnreal | t > B}] : THEORY
BEGIN
  IMPORTING ACCoRD@Lookahead

  EntryExit : TYPE = [#
    entry, exit : Lookahead[B,T]
  #]

  EmptyInterval : MACRO EntryExit = (#
    entry := T,
    exit  := B
  #)

  WholeInterval : MACRO EntryExit = (#
    entry := B,
    exit  := T
  #) 

  ee : VAR EntryExit
  t  : VAR Lookahead[B,T]

  nonempty?(ee) : bool =
    ee`entry <= ee`exit

  singleton?(ee) : bool =
    ee`entry = ee`exit

  member(t,ee) : MACRO bool =
    ee`entry <= t AND t <= ee`exit

  midpoint(nee:(nonempty?)) :  {t : Lookahead[B,T] | member(t,nee)} =
    (nee`entry+nee`exit)/2

  nonempty_def : LEMMA
    nonempty?(ee) IFF EXISTS (t:Lookahead[B,T]): member(t,ee)

  subint?(ee1,ee2:EntryExit): bool =
    ee2`entry<=ee1`entry AND
    ee2`exit >=ee1`exit  

  nonempty_subint: LEMMA FORALL (ee1,ee2:EntryExit):
    nonempty?(ee1) AND subint?(ee1,ee2) IMPLIES
    nonempty?(ee2)

END EntryExit_interval
