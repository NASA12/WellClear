%------------------------------------------------------------------------------
% tcasra_types
% Definition of corrective/preventive RAs
% By: Anthony Narkawicz and Cesar Munoz
%     October 2012
%------------------------------------------------------------------------------

tcasra_types[TAU,DMOD:posreal]  : THEORY 
% TAU is the RA time threshold 
% DMOD is the modified RA distance thershold
BEGIN

  IMPORTING vectors@vectors_3D,
	    ACCoRD@vertical,
	    vectors@vect_3D_2D,
	    tcas_tau[DMOD]

  so,vo,
  si,vi : VAR Vect3
  tr,X  : VAR real

  % Vertical Dimension Analysis %

  MaxVAccel,
  Alim      : VAR posreal
  MaxVSpeed : VAR nnreal

  t,tau: VAR nnreal % tau is a variable representing tcas tau, which
  	     	    % is TCAS's approximation to TCPA. See tcas_2D.pvs.

  eps,dir: VAR Sign

  soz,voz,siz,viz: VAR real % Original altitude and vertical speed
  
  tcas_alt_at(soz,voz,MaxVAccel,MaxVSpeed,eps)(tr): real =
    LET
      max_vs_start:nnreal = (IF tr<=0 OR eps*voz >= MaxVSpeed THEN 0
      		             ELSE (eps*MaxVSpeed-voz)/(eps*MaxVAccel) ENDIF),
      quadtime = min(tr,max_vs_start),
      lineartime = max(0,tr-max_vs_start),
      quadpart = eps*(MaxVAccel/2)*quadtime^2 + voz*quadtime + soz,
      linearpart = eps*MaxVSpeed*lineartime
    IN
      quadpart + linearpart

  tcas_alt_at_solved: LEMMA 
    (tcas_alt_at(soz,voz,MaxVAccel,MaxVSpeed,eps)(tau) = X
    IFF
    ((tau = 0 AND X = soz)
     OR
     (tau > 0 AND eps*voz>=MaxVSpeed AND MaxVSpeed = eps*(X-soz)/tau)
     OR
     (tau > 0 AND eps*voz<MaxVSpeed AND MaxVSpeed >= eps * voz + tau * MaxVAccel AND tau ^ 2 * (MaxVAccel / 2) * eps + voz * tau + soz = X)
     OR
     (tau > 0 AND eps*voz<MaxVSpeed AND MaxVSpeed < eps * voz + tau * MaxVAccel AND X*eps<=eps*(soz+voz*tau)+(MaxVAccel/2)*tau^2 AND
      LET aa = -eps,
          bb = 2*voz+2*MaxVAccel*eps*tau,
	  cc = -eps*(voz*voz)+2*MaxVAccel*soz
      IN discr(aa, bb, cc-2*MaxVAccel*X) >= 0 AND quadratic(aa,bb,cc)(MaxVSpeed) = 2*MaxVAccel*X)))

  tcas_alt_at_rewrite: LEMMA 
    dir*tcas_alt_at(soz,voz,MaxVAccel,MaxVSpeed,eps)(tau) =
      IF tau = 0 THEN dir*soz
      ELSE
        IF eps * voz >= MaxVSpeed THEN dir*eps*MaxVSpeed * tau + dir * soz
	ELSE
	  IF MaxVSpeed >= eps * voz + tau * MaxVAccel THEN 
	       dir*eps*tau ^ 2 * (MaxVAccel / 2) + dir * voz * tau + dir*soz
	  ELSE quadratic(-dir*eps / (2 * MaxVAccel), dir * eps * tau + 
	   	           dir*voz / MaxVAccel,-dir *eps * (voz * voz) 
			   /(2 * MaxVAccel) + dir*soz)(MaxVSpeed)
	  ENDIF
	ENDIF
      ENDIF

  tcas_alt_quad_optimum: LEMMA
    LET aa = -dir*eps / (2 * MaxVAccel),
    	bb = dir * eps * tau + dir*voz / MaxVAccel
    IN -bb/(2*aa) = eps * voz + tau * MaxVAccel

  strength: VAR real

  Sep(soz,voz,siz,viz,MaxVAccel,eps,strength,tau): real =
    LET own_alt = tcas_alt_at(soz,voz,MaxVAccel,abs(strength),eps*sign(strength))(tau),
    	int_alt = siz+tau*viz
    IN eps*(own_alt-int_alt)

  tcas_direction(soz,voz,siz,viz,MaxVAccel,MaxVSpeed,Alim,tau): Sign =
    LET
      own_up_alt = tcas_alt_at(soz,voz,MaxVAccel,MaxVSpeed,1)(tau),
      own_down_alt = tcas_alt_at(soz,voz,MaxVAccel,MaxVSpeed,-1)(tau),
      int_alt = siz+tau*viz,
      up_dist = own_up_alt - int_alt,
      down_dist = int_alt - own_down_alt, % In general, these will both be positive
      current_up_down = sign(soz-siz)
    IN
      IF current_up_down = 1 AND up_dist >= Alim THEN 1
      ELSIF current_up_down = -1 AND down_dist >= Alim THEN -1 % Avoid crossing
      ELSIF up_dist >= down_dist THEN 1
      ELSE  -1 ENDIF

  tcas_direction_lem : LEMMA
    LET
      own_up_alt = tcas_alt_at(soz,voz,MaxVAccel,MaxVSpeed,1)(tau),
      own_down_alt = tcas_alt_at(soz,voz,MaxVAccel,MaxVSpeed,-1)(tau),
      int_alt = siz+tau*viz,
      up_dist = own_up_alt - int_alt,
      down_dist = int_alt - own_down_alt, % In general, these will both be positive
      current_up_down = sign(soz-siz),
      A = (down_dist >= Alim),
      B = (up_dist >= Alim),
      sense = tcas_direction(soz,voz,siz,viz,MaxVAccel,MaxVSpeed,Alim,tau),
      sense_is_not_crossing = (sense = current_up_down)
    IN
      (A AND (NOT B) IMPLIES sense = -1)
      AND
      ((NOT A) AND B IMPLIES sense = 1)
      AND
      (A AND B IMPLIES sense_is_not_crossing)
      AND
      ((NOT A) AND (NOT B) IMPLIES 
        sense = (IF up_dist>=down_dist THEN 1 ELSE -1 ENDIF))

  tcas_direction_lem_Sep : LEMMA
    LET
      own_up_alt = tcas_alt_at(soz,voz,MaxVAccel,MaxVSpeed,1)(tau),
      own_down_alt = tcas_alt_at(soz,voz,MaxVAccel,MaxVSpeed,-1)(tau),
      current_up_down = sign(soz-siz),
      Sepneg1 = Sep(soz,voz,siz,viz,MaxVAccel,-1,MaxVSpeed,tau),
      Sep1 = Sep(soz,voz,siz,viz,MaxVAccel,1,MaxVSpeed,tau),
      A = (Sepneg1>=Alim),
      B = (Sep1>=Alim),
      sense = tcas_direction(soz,voz,siz,viz,MaxVAccel,MaxVSpeed,Alim,tau),
      sense_is_not_crossing = (sense = current_up_down)
    IN
      (A AND (NOT B) IMPLIES sense = -1)
      AND
      ((NOT A) AND B IMPLIES sense = 1)
      AND
      (A AND B IMPLIES sense_is_not_crossing)
      AND
      ((NOT A) AND (NOT B) IMPLIES 
        sense = (IF Sep1>=Sepneg1 THEN 1 ELSE -1 ENDIF))

  corrective?(so,vo,si,vi,MaxVAccel,MaxVSpeed,Alim): bool =
   sqv(vect2(so-si)) < sq(DMOD) OR
   (vect2(so-si)*vect2(vo-vi)<0 AND
   LET tau = tau_current(so,vo,si,vi),
       epsi = tcas_direction(so`z,vo`z,si`z,vi`z,MaxVAccel,MaxVSpeed,Alim,tau)
   IN  epsi*((so-si)`z + tau*(vo-vi)`z) < Alim)

END tcasra_types
